<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>3D Interactive Website - Screen Sharing & Models</title>
  <meta name="description" content="Interactive 3D environment with screen sharing, GLB model loading, and object manipulation">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      margin: 0;
      padding: 0; /* Research shows this is critical for mobile */
      overflow: hidden;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      background: #000;
      color: #ffffff;
    }

    #scene-container {
      width: 100vw;
      height: 100vh;
      position: relative;
    }
    
    /* Research-backed mobile canvas styles */
    canvas {
      display: block;
      width: 100%;
      height: 100%;
      touch-action: none; /* Prevents scrolling on touch */
    }

    .screen {
      position: absolute;
      width: 320px;
      height: 240px;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: rgba(0, 0, 0, 0.9);
      border: 2px solid #00ff00;
      border-radius: 8px;
      padding: 20px;
      z-index: 100;
      backdrop-filter: blur(5px);
      cursor: pointer;
    }

    .screen h2 {
      color: #00ff00;
      margin-bottom: 15px;
      text-align: center;
      font-size: 18px;
    }

    .terminal-content {
      font-size: 14px;
      line-height: 1.5;
    }

    .terminal-content p {
      margin-bottom: 8px;
    }

    .controls-info {
      position: absolute;
      bottom: 20px;
      left: 20px;
      z-index: 200;
      background: rgba(0, 0, 0, 0.8);
      padding: 15px;
      border-radius: 5px;
      border: 1px solid #00ff00;
      font-size: 12px;
    }

    .controls-info p {
      margin-bottom: 5px;
      color: #00ff00;
    }

    .model-controls {
      position: absolute;
      top: 90px;
      left: 20px;
      z-index: 350;
      background: rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(10px);
      -webkit-backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.2);
      border-radius: 16px;
      padding: 16px;
      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.3);
      display: none;
      min-width: 220px;
      transition: all 0.3s ease;
    }
    
    .model-controls h3 {
      color: #ffffff;
      font-size: 14px;
      font-weight: 600;
      margin: 0 0 12px 0;
      text-align: center;
      opacity: 0.9;
    }
    
    .model-controls .control-row {
      display: flex;
      gap: 8px;
      margin-bottom: 8px;
      justify-content: center;
    }
    
    .model-controls button {
      background: rgba(255, 255, 255, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.2);
      color: #ffffff;
      padding: 8px;
      width: 40px;
      height: 40px;
      border-radius: 10px;
      cursor: pointer;
      font-size: 16px;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all 0.3s ease;
    }
    
    .model-controls button:hover {
      background: rgba(255, 255, 255, 0.2);
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    }
    
    .model-controls button:active {
      transform: translateY(0);
      background: rgba(255, 255, 255, 0.15);
    }
    
    .model-controls .delete-button {
      background: rgba(255, 77, 77, 0.2);
      border-color: rgba(255, 77, 77, 0.3);
      color: #ff6666;
      width: 100%;
      margin-top: 8px;
    }
    
    .model-controls .delete-button:hover {
      background: rgba(255, 77, 77, 0.3);
      border-color: rgba(255, 77, 77, 0.4);
    }

    .model-controls.visible {
      display: block;
    }

    .model-controls h3 {
      color: #ffffff;
      margin: 0 0 12px 0;
      font-size: 16px;
      font-weight: 600;
    }

    .model-controls button {
      background: rgba(255, 255, 255, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.2);
      color: #ffffff;
      padding: 8px 12px;
      margin: 4px;
      border-radius: 10px;
      cursor: pointer;
      font-size: 12px;
      transition: all 0.3s ease;
      min-width: 40px;
    }

    .model-controls button:hover {
      background: rgba(255, 255, 255, 0.2);
      transform: translateY(-1px);
    }

    .model-controls button#delete-selected {
      background: rgba(255, 59, 48, 0.2);
      border-color: rgba(255, 59, 48, 0.3);
    }

    .model-controls button#delete-selected:hover {
      background: rgba(255, 59, 48, 0.3);
    }

    .screen-controls {
      position: absolute;
      top: 80px;
      left: 20px;
      z-index: 350;
      background: rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(10px);
      -webkit-backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.2);
      border-radius: 16px;
      padding: 20px;
      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.3);
      width: 240px;
      display: none;
    }

    .screen-controls h3 {
      color: #ffffff;
      margin: 0 0 12px 0;
      font-size: 16px;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .screen-controls button {
      background: rgba(255, 255, 255, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.2);
      color: #ffffff;
      padding: 10px 16px;
      margin: 4px 0;
      border-radius: 10px;
      cursor: pointer;
      font-size: 13px;
      width: 100%;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      gap: 8px;
      justify-content: center;
    }

    .screen-controls button:hover {
      background: rgba(255, 255, 255, 0.2);
      transform: translateY(-1px);
    }

    .screen-controls input[type="file"] {
      display: none;
    }

    .screen-controls .file-input-wrapper {
      background: rgba(255, 255, 255, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.2);
      color: #ffffff;
      padding: 10px 16px;
      margin: 4px 0;
      border-radius: 10px;
      cursor: pointer;
      font-size: 13px;
      width: 100%;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      gap: 8px;
      justify-content: center;
    }

    .screen-controls .file-input-wrapper:hover {
      background: rgba(255, 255, 255, 0.2);
      transform: translateY(-1px);
    }

    .screen-controls .volume-control {
      display: flex;
      align-items: center;
      gap: 10px;
      margin-top: 12px;
      padding: 8px;
      background: rgba(255, 255, 255, 0.05);
      border-radius: 10px;
    }

    .screen-controls input[type="range"] {
      appearance: none;
      background: transparent;
      cursor: pointer;
      height: 20px;
      flex: 1;
    }

    .screen-controls input[type="range"]::-webkit-slider-track {
      background: rgba(255, 255, 255, 0.2);
      height: 4px;
      border-radius: 2px;
    }

    .screen-controls input[type="range"]::-webkit-slider-thumb {
      appearance: none;
      background: #ffffff;
      height: 14px;
      width: 14px;
      border-radius: 50%;
      cursor: pointer;
      margin-top: -5px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
    }


    #video-element {
      display: none;
    }

    .drag-overlay {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(74, 144, 226, 0.1);
      border: 3px dashed rgba(74, 144, 226, 0.5);
      z-index: 300;
      display: none;
      align-items: center;
      justify-content: center;
      font-size: 24px;
      color: #ffffff;
      pointer-events: none;
      backdrop-filter: blur(2px);
    }

    .drag-overlay.active {
      display: flex;
    }

    canvas {
      display: block;
    }

    @media (max-width: 768px) {
      .screen {
        width: 280px;
        height: 200px;
        padding: 15px;
      }
      
      
      .screen-controls {
        width: 200px;
      }
    }

    /* Glass Morphism Menu Styles */
    .glass-menu {
      position: absolute;
      top: 20px;
      left: 20px;
      z-index: 400;
      display: flex;
      gap: 10px;
      background: rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(10px);
      -webkit-backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.2);
      border-radius: 16px;
      padding: 10px;
      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.3);
    }

    .glass-button {
      width: 40px;
      height: 40px;
      background: rgba(255, 255, 255, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.2);
      border-radius: 12px;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 18px;
      color: #ffffff;
      transition: all 0.3s ease;
      position: relative;
    }

    .glass-button:hover {
      background: rgba(255, 255, 255, 0.2);
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
    }

    .glass-button .tooltip {
      position: absolute;
      bottom: -35px;
      left: 50%;
      transform: translateX(-50%) scale(0);
      background: rgba(0, 0, 0, 0.9);
      color: #ffffff;
      padding: 6px 12px;
      border-radius: 8px;
      font-size: 12px;
      white-space: nowrap;
      opacity: 0;
      transition: all 0.3s ease;
      pointer-events: none;
      font-weight: 500;
    }

    .glass-button:hover .tooltip {
      transform: translateX(-50%) scale(1);
      opacity: 1;
    }

    /* User List Styles */
    .user-list {
      position: absolute;
      top: 20px;
      right: 20px;
      z-index: 300;
      background: rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(10px);
      -webkit-backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.2);
      border-radius: 16px;
      padding: 15px 20px;
      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.3);
      min-width: 150px;
    }

    .user-list-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 10px;
      gap: 15px;
    }

    .user-list h3 {
      margin: 0;
      color: #ffffff;
      font-size: 14px;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .user-list-close {
      background: rgba(255, 255, 255, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.3);
      color: #ffffff;
      font-size: 20px;
      width: 24px;
      height: 24px;
      border-radius: 50%;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all 0.3s ease;
      padding: 0;
      line-height: 1;
      flex-shrink: 0;
    }
    
    .user-list-close:hover {
      background: rgba(255, 255, 255, 0.2);
      border-color: rgba(255, 255, 255, 0.5);
    }
    
    .user-list.collapsed {
      min-width: auto;
      padding: 10px 15px;
    }
    
    .user-list.collapsed .user-list-body {
      display: none;
    }
    
    .user-list.collapsed .user-list-header {
      margin-bottom: 0;
    }

    .user-item {
      margin: 6px 0;
      color: #ffffff;
      font-size: 12px;
      padding: 4px 8px;
      border-radius: 8px;
      background: rgba(255, 255, 255, 0.05);
    }

    .user-item.self {
      background: rgba(74, 144, 226, 0.2);
      font-weight: 600;
    }
    
    .avatar-upload-button {
      background: rgba(74, 144, 226, 0.2);
      border: 1px solid rgba(74, 144, 226, 0.3);
      color: #4a90e2;
      padding: 6px 12px;
      border-radius: 8px;
      cursor: pointer;
      font-size: 12px;
      margin-top: 10px;
      width: calc(100% - 20px);
      margin-left: 10px;
      margin-right: 10px;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 6px;
    }
    
    .avatar-upload-button:hover {
      background: rgba(74, 144, 226, 0.3);
      transform: translateY(-1px);
    }

    .user-count {
      font-size: 11px;
      color: rgba(255, 255, 255, 0.7);
      margin-left: 4px;
    }

    /* Chat Interface Styles */
    .chat-container {
      position: absolute;
      bottom: 20px;
      right: 20px;
      width: 350px;
      z-index: 300;
      background: transparent;
      display: flex;
      flex-direction: column;
      transition: all 0.3s ease;
      pointer-events: none;
    }
    
    .chat-container > * {
      pointer-events: auto;
    }

    .chat-header {
      display: none;
    }

    .chat-messages {
      max-height: 120px;
      overflow-y: auto;
      padding: 0 0 10px 0;
      font-size: 14px;
      line-height: 1.4;
      display: flex;
      flex-direction: column;
      justify-content: flex-end;
      scrollbar-width: none;
      -ms-overflow-style: none;
    }

    .chat-messages::-webkit-scrollbar {
      width: 6px;
      display: none;
    }
    
    .chat-messages:hover::-webkit-scrollbar {
      display: block;
    }

    .chat-messages::-webkit-scrollbar-track {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 3px;
    }

    .chat-messages::-webkit-scrollbar-thumb {
      background: rgba(255, 255, 255, 0.2);
      border-radius: 3px;
    }

    .chat-message {
      margin: 3px 0;
      word-wrap: break-word;
      background: transparent;
      padding: 2px 0;
      color: #ffffff;
      font-weight: 600;
      text-shadow: 0 2px 4px rgba(0, 0, 0, 0.8), 0 0 8px rgba(0, 0, 0, 0.6);
    }

    .chat-message .username {
      color: #4aff4a;
      font-weight: 700;
      text-shadow: 0 2px 4px rgba(0, 0, 0, 0.9), 0 0 10px rgba(74, 255, 74, 0.3);
    }

    .chat-message .timestamp {
      display: none;
    }

    .chat-message .content {
      color: #ffffff;
      margin-left: 5px;
      font-size: 14px;
      font-weight: 600;
    }

    .chat-input-container {
      border-top: none;
      padding: 0;
      display: flex;
      gap: 8px;
      margin-top: 8px;
    }

    .chat-input {
      flex: 1;
      background: rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(10px);
      -webkit-backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.2);
      color: #ffffff;
      padding: 8px 12px;
      border-radius: 12px;
      font-size: 13px;
      transition: all 0.3s ease;
    }

    .chat-input:focus {
      outline: none;
      border-color: rgba(74, 144, 226, 0.5);
      background: rgba(255, 255, 255, 0.15);
    }

    .chat-send {
      background: transparent;
      border: 1px solid rgba(255, 255, 255, 0.3);
      color: #ffffff;
      padding: 8px 16px;
      border-radius: 12px;
      cursor: pointer;
      font-size: 13px;
      font-weight: 600;
      transition: all 0.3s ease;
    }

    .chat-send:hover {
      background: rgba(255, 255, 255, 0.1);
      border-color: rgba(255, 255, 255, 0.5);
    }

    .chat-toggle {
      position: absolute;
      bottom: 20px;
      right: 380px;
      z-index: 301;
      width: 40px;
      height: 40px;
      background: rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(10px);
      -webkit-backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.2);
      border-radius: 12px;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 18px;
      transition: all 0.3s ease;
      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.3);
    }

    .chat-toggle:hover {
      background: rgba(255, 255, 255, 0.2);
      transform: translateY(-2px);
    }

    .chat-container.hidden {
      display: none;
    }

    /* Help Dialog Styles */
    .help-dialog {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 400px;
      max-width: 90vw;
      background: rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(10px);
      -webkit-backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.2);
      border-radius: 16px;
      padding: 24px;
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);
      z-index: 500;
      display: none;
    }

    .help-dialog.visible {
      display: block;
    }

    .help-dialog h2 {
      color: #ffffff;
      margin: 0 0 16px 0;
      font-size: 20px;
      font-weight: 600;
    }

    .help-dialog .help-section {
      margin-bottom: 16px;
    }

    .help-dialog h3 {
      color: #4a90e2;
      font-size: 14px;
      margin: 0 0 8px 0;
      font-weight: 600;
    }

    .help-dialog p {
      color: #ffffff;
      font-size: 13px;
      line-height: 1.5;
      margin: 4px 0;
    }

    .help-dialog .key {
      background: rgba(255, 255, 255, 0.1);
      padding: 2px 6px;
      border-radius: 4px;
      font-family: monospace;
      font-size: 12px;
    }

    .help-close {
      position: absolute;
      top: 16px;
      right: 16px;
      width: 32px;
      height: 32px;
      background: rgba(255, 255, 255, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.2);
      border-radius: 8px;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 16px;
      color: #ffffff;
      transition: all 0.3s ease;
    }

    .help-close:hover {
      background: rgba(255, 255, 255, 0.2);
    }
    
    .object-list-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 10px 15px;
      margin: 5px 0;
      background: rgba(255, 255, 255, 0.1);
      border-radius: 10px;
      border: 1px solid rgba(255, 255, 255, 0.2);
    }
    
    .object-list-item:hover {
      background: rgba(255, 255, 255, 0.15);
    }
    
    .object-list-item span {
      color: #ffffff;
      font-size: 14px;
    }
    
    .object-delete-btn {
      background: rgba(255, 59, 48, 0.2);
      border: 1px solid rgba(255, 59, 48, 0.3);
      color: #ffffff;
      padding: 5px 10px;
      border-radius: 6px;
      cursor: pointer;
      font-size: 12px;
      transition: all 0.3s ease;
    }
    
    .object-delete-btn:hover {
      background: rgba(255, 59, 48, 0.3);
      transform: translateY(-1px);
    }

    /* Welcome Dialog Styles */
    .welcome-dialog {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 350px;
      max-width: 90vw;
      background: rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(10px);
      -webkit-backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.2);
      border-radius: 16px;
      padding: 32px;
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);
      z-index: 600;
      text-align: center;
    }

    .welcome-dialog h2 {
      color: #ffffff;
      margin: 0 0 8px 0;
      font-size: 24px;
      font-weight: 600;
    }

    .welcome-dialog p {
      color: rgba(255, 255, 255, 0.8);
      margin: 0 0 24px 0;
      font-size: 14px;
    }

    .welcome-input {
      width: 100%;
      background: rgba(255, 255, 255, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.2);
      color: #ffffff;
      padding: 12px 16px;
      border-radius: 12px;
      font-size: 16px;
      text-align: center;
      margin-bottom: 20px;
      transition: all 0.3s ease;
    }

    .welcome-input:focus {
      outline: none;
      border-color: rgba(74, 144, 226, 0.5);
      background: rgba(255, 255, 255, 0.15);
    }

    .welcome-input::placeholder {
      color: rgba(255, 255, 255, 0.5);
    }

    .welcome-button {
      background: rgba(74, 144, 226, 0.3);
      border: 1px solid rgba(74, 144, 226, 0.4);
      color: #ffffff;
      padding: 12px 32px;
      border-radius: 12px;
      cursor: pointer;
      font-size: 16px;
      font-weight: 600;
      transition: all 0.3s ease;
      min-width: 120px;
    }

    .welcome-button:hover {
      background: rgba(74, 144, 226, 0.4);
      transform: translateY(-2px);
      box-shadow: 0 4px 16px rgba(74, 144, 226, 0.3);
    }

    .welcome-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.7);
      z-index: 599;
    }

    /* Visitor Counter Styles */
    .visitor-counter {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      background: rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(10px);
      -webkit-backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.2);
      border-radius: 20px;
      padding: 8px 24px;
      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.3);
      z-index: 400;
      transition: all 0.3s ease;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    }

    .visitor-counter:hover {
      background: rgba(255, 255, 255, 0.15);
      transform: translateX(-50%) translateY(-2px);
      box-shadow: 0 6px 20px rgba(0, 0, 0, 0.4);
    }

    .visitor-count {
      color: #ffffff;
      font-size: 14px;
      font-weight: 600;
      text-align: center;
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .visitor-count-number {
      color: #4a90e2;
      font-size: 16px;
      font-weight: 700;
    }

    @media (max-width: 768px) {
      .visitor-counter {
        top: 65px; /* Move below menu on mobile */
        padding: 6px 20px;
      }

      .visitor-count {
        font-size: 12px;
      }

      .visitor-count-number {
        font-size: 14px;
      }

      .user-list {
        top: 10px;
        right: 10px;
        padding: 10px 15px;
        min-width: 120px;
      }

      .user-list h3 {
        font-size: 12px;
      }
      
      .user-list-close {
        width: 20px;
        height: 20px;
        font-size: 16px;
      }

      .user-item {
        font-size: 11px;
      }

      .chat-container {
        width: calc(100vw - 20px);
        max-width: 350px;
        bottom: 10px;
        right: 10px;
      }

      .chat-toggle {
        right: calc(100vw - 50px);
        bottom: 10px;
      }

      .help-dialog {
        width: calc(100vw - 40px);
        padding: 20px;
      }
    }
  </style>
</head>
<body>
  <div id="scene-container">
    <div class="screen" id="interactive-screen" style="display: none;">
      <h2>3D Model Loader</h2>
      <div class="terminal-content">
        <p>🖥️ Large screen sharing available!</p>
        <p>📦 Drag & drop GLB files here!</p>
        <p>Click to enter or press ENTER</p>
        <p>WASD to move, mouse to look</p>
      </div>
    </div>
    <div class="drag-overlay" id="drag-overlay">
      <div>Drop GLB file to load 3D model</div>
    </div>
  </div>
  
  <!-- Glass Menu -->
  <div class="glass-menu" id="glass-menu">
    <button class="glass-button" id="menu-home">
      🏠
      <span class="tooltip">Home</span>
    </button>
    <button class="glass-button" id="menu-screen">
      🖥️
      <span class="tooltip">Screen Share</span>
    </button>
    <button class="glass-button" id="menu-objects">
      📦
      <span class="tooltip">Load GLB Model</span>
    </button>
    <button class="glass-button" id="menu-help">
      ❓
      <span class="tooltip">Help</span>
    </button>
  </div>
  
  <!-- Visitor Counter (Disabled) -->
  <!-- <div class="visitor-counter" id="visitor-counter">
    <div class="visitor-count">
      <span class="visitor-count-number" id="visitor-count-number">0</span>
      <span>visitors</span>
    </div>
  </div> -->
  
  <div class="screen-controls" id="screen-controls" style="display: none;">
    <h3>🖥️ Screen Controls</h3>
    <button id="share-screen">🖥️ Share Desktop</button>
    <button id="stop-sharing" style="display: none;">⏹️ Stop Sharing</button>
    <label class="file-input-wrapper">
      📁 Load Video File
      <input type="file" id="video-upload" accept="video/*" />
    </label>
    <button id="clear-screen">🧹 Clear Screen</button>
    <div class="volume-control">
      <button id="toggle-audio" style="min-width: auto; padding: 6px 10px;">🔊</button>
      <input type="range" id="volume-slider" min="0" max="100" value="100">
    </div>
  </div>
  
  <div class="screen-controls" id="objects-controls" style="display: none;">
    <h3>📦 Objects Menu</h3>
    <label class="file-input-wrapper">
      📤 Upload GLB Model
      <input type="file" id="glb-upload" accept=".glb,.gltf" />
    </label>
    <button id="view-objects">📋 View All Objects</button>
  </div>

  
  <video id="video-element" autoplay controls muted="false" volume="1.0" style="display: none;"></video>
  
  <div class="model-controls" id="model-controls">
    <h3 id="selected-object-name">Object Controls</h3>
    <div class="control-row">
      <button id="move-up" title="Move Up">↑</button>
      <button id="move-down" title="Move Down">↓</button>
      <button id="move-left" title="Move Left">←</button>
      <button id="move-right" title="Move Right">→</button>
    </div>
    <div class="control-row">
      <button id="move-forward" title="Move Forward">▲</button>
      <button id="move-backward" title="Move Backward">▼</button>
      <button id="scale-up" title="Scale Up">+</button>
      <button id="scale-down" title="Scale Down">-</button>
    </div>
    <div class="control-row">
      <button id="rotate-y" title="Rotate">↻</button>
      <button id="reset-object" title="Reset">⟲</button>
      <button id="deselect-object" title="Deselect">✖</button>
    </div>
    <button id="delete-selected" class="delete-button">🗑️ Delete Object</button>
  </div>

  <!-- User List in Top Right -->
  <div class="user-list" id="user-list">
    <div class="user-list-header">
      <h3>👥 Users Online <span class="user-count" id="user-count-badge">(1)</span></h3>
      <button class="user-list-close" id="user-list-close">×</button>
    </div>
    <div class="user-list-body" id="user-list-body">
      <div id="user-list-content">
        <div class="user-item self" id="current-user">Loading...</div>
      </div>
      <button class="avatar-upload-button" id="upload-avatar">
        🎭 Upload Custom Avatar
      </button>
    </div>
  </div>

  <!-- Chat Interface -->
  <div class="chat-container" id="chat-container">
    <div class="chat-messages" id="chat-messages">
      <!-- Messages will be added here -->
    </div>
    <div class="chat-input-container">
      <input type="text" class="chat-input" id="chat-input" placeholder="Type message..." maxlength="200">
      <button class="chat-send" id="chat-send">Send</button>
    </div>
  </div>

  <!-- Chat Toggle Button -->
  <button class="chat-toggle" id="chat-toggle">💬</button>

  <!-- Help Dialog -->
  <div class="help-dialog" id="help-dialog">
    <button class="help-close" id="help-close">✖</button>
    <h2>Controls & Help</h2>
    
    <div class="help-section">
      <h3>Movement</h3>
      <p><span class="key">W</span> <span class="key">A</span> <span class="key">S</span> <span class="key">D</span> - Move around</p>
      <p><span class="key">Mouse</span> - Look around</p>
      <p><span class="key">ENTER</span> - Hide/show screen</p>
    </div>
    
    <div class="help-section">
      <h3>Object Manipulation</h3>
      <p><span class="key">Click</span> - Select object</p>
      <p><span class="key">R</span> - Reset object</p>
      <p><span class="key">Q</span> - Rotate object</p>
      <p><span class="key">E</span> / <span class="key">C</span> - Scale up/down</p>
      <p><span class="key">DEL</span> - Delete object</p>
      <p>Drag GLB files to load 3D models</p>
    </div>
    
    <div class="help-section">
      <h3>Features</h3>
      <p>🖥️ Screen sharing with other users</p>
      <p>📦 Load and manipulate 3D objects</p>
      <p>💬 Real-time chat with persistence</p>
      <p>👥 See other users as avatars</p>
    </div>
  </div>
  
  <!-- Objects List Modal -->
  <div class="help-dialog" id="objects-list-dialog">
    <button class="help-close" id="objects-list-close">✖</button>
    <h2>📦 Objects in Space</h2>
    
    <div id="objects-list-container" style="max-height: 400px; overflow-y: auto; margin-top: 20px;">
      <!-- Objects will be populated here -->
    </div>
  </div>

  <!-- Welcome Dialog -->
  <div class="welcome-overlay" id="welcome-overlay"></div>
  <div class="welcome-dialog" id="welcome-dialog">
    <h2>Welcome</h2>
    <p>Enter your name to join</p>
    <input type="text" class="welcome-input" id="welcome-input" placeholder="Your name" maxlength="20" autocomplete="off">
    <button class="welcome-button" id="welcome-button">Join</button>
  </div>
  
  <script src="https://unpkg.com/socket.io-client@4.7.2/dist/socket.io.js"></script>
  <script src="https://unpkg.com/simple-peer@9.11.1/simplepeer.min.js"></script>
  
  <script type="importmap">
    {
      "imports": {
        "three": "https://unpkg.com/three@0.158.0/build/three.module.js",
        "three/addons/": "https://unpkg.com/three@0.158.0/examples/jsm/"
      }
    }
  </script>
  
  <script type="module">
    import * as THREE from 'three';
    import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';
    import { EffectComposer } from 'three/addons/postprocessing/EffectComposer.js';
    import { RenderPass } from 'three/addons/postprocessing/RenderPass.js';
    import { UnrealBloomPass } from 'three/addons/postprocessing/UnrealBloomPass.js';
    import { OutputPass } from 'three/addons/postprocessing/OutputPass.js';

    console.log('Starting 3D Interactive Website...');

    // Enhanced mobile detection - define FIRST
    const isMobileEarly = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);

    // Scene setup
    const scene = new THREE.Scene();
    // Test if we can see ANY background on mobile - use bright color for debugging
    if (isMobileEarly) {
      scene.background = new THREE.Color(0x222222); // Darker gray for mobile visibility test
    } else {
      scene.background = new THREE.Color(0x000011); // Original dark blue for desktop
    }

    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    
    // Create user object/group that the camera is attached to
    const userObject = new THREE.Group();
    userObject.add(camera);
    scene.add(userObject);
    
    // Create local user avatar visible to the current user
    const localAvatarGeometry = new THREE.SphereGeometry(0.15, 8, 6);
    const localAvatarMaterial = new THREE.MeshBasicMaterial({ 
      color: 0x00ff00, // Green color for current user
      transparent: true,
      opacity: 0.6
    });
    const localAvatar = new THREE.Mesh(localAvatarGeometry, localAvatarMaterial);
    localAvatar.position.set(0, -0.3, -0.8); // Below and in front of camera
    userObject.add(localAvatar);
    const isIOSNew = /iPhone|iPad/.test(navigator.userAgent) && parseFloat(navigator.userAgent.match(/OS (\d+)/)?.[1] || '0') >= 17;
    
    // Test WebGL context creation first
    let webglTestCanvas = document.createElement('canvas');
    let testGL = null;
    let webglSupported = false;
    let highpSupported = false;
    
    try {
      testGL = webglTestCanvas.getContext('webgl') || webglTestCanvas.getContext('experimental-webgl');
      if (testGL) {
        webglSupported = true;
        // Test shader precision support
        const fragmentShaderPrecision = testGL.getShaderPrecisionFormat(testGL.FRAGMENT_SHADER, testGL.HIGH_FLOAT);
        highpSupported = fragmentShaderPrecision && fragmentShaderPrecision.precision > 0;
        console.log('WebGL supported:', webglSupported, 'Highp supported:', highpSupported);
      }
    } catch (e) {
      console.error('WebGL context creation failed:', e);
    } finally {
      if (testGL) {
        // Clean up test context to avoid context limit issues
        const loseContextExt = testGL.getExtension('WEBGL_lose_context');
        if (loseContextExt) loseContextExt.loseContext();
      }
      webglTestCanvas = null;
      testGL = null;
    }
    
    if (!webglSupported) {
      document.body.innerHTML = '<div style="color: white; text-align: center; margin-top: 50px;">WebGL not supported on this device</div>';
      throw new Error('WebGL not supported');
    }
    
    // Create renderer with mobile-optimized settings based on research
    const renderer = new THREE.WebGLRenderer({ 
      antialias: false, // Disable on all devices to avoid mobile issues
      alpha: false, // CRITICAL: Research shows alpha: true causes mobile white screens
      powerPreference: "high-performance", // Research shows this helps with multiple GPUs
      preserveDrawingBuffer: true, // Required for some mobile browsers
      failIfMajorPerformanceCaveat: false,
      stencil: false, // Disable stencil buffer to save memory
      depth: true,
      logarithmicDepthBuffer: false // Can cause issues on some mobile GPUs
    });
    
    // Conservative sizing for mobile
    const maxSize = isMobileEarly ? 1024 : 2048;
    const actualWidth = Math.min(window.innerWidth, maxSize);
    const actualHeight = Math.min(window.innerHeight, maxSize);
    
    renderer.setSize(actualWidth, actualHeight);
    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2)); // Research-backed pixel ratio handling
    
    // Essential renderer settings based on mobile compatibility research
    renderer.outputColorSpace = THREE.SRGBColorSpace; // Use standard sRGB, not Linear
    renderer.toneMapping = THREE.NoToneMapping;
    renderer.toneMappingExposure = 1.0;
    renderer.sortObjects = false; // Disable sorting for performance
    renderer.shadowMap.enabled = false; // Always disable shadows
    
    // CRITICAL: Set clear color only if no scene background (research-backed fix)
    if (!scene.background) {
      renderer.setClearColor(0x000000, 1); // Black background, full opacity
    }
    
    console.log('Mobile-optimized renderer created');
    
    // Shadow map setup will be handled in lighting section based on device type
    renderer.shadowMap.type = THREE.PCFSoftShadowMap;

    // Add context loss/restore handling before appending to DOM
    const canvas = renderer.domElement;
    canvas.addEventListener('webglcontextlost', function(event) {
      event.preventDefault();
      console.warn('WebGL context lost - attempting recovery');
      // Stop animation loop
      if (window.animationId) {
        cancelAnimationFrame(window.animationId);
      }
    }, false);
    
    canvas.addEventListener('webglcontextrestored', function(event) {
      console.log('WebGL context restored - reinitializing');
      // Force page reload on context restore for now (simplest recovery)
      window.location.reload();
    }, false);
    
    // Set canvas style for mobile compatibility (research-backed)
    canvas.style.width = '100%';
    canvas.style.height = '100%';
    canvas.style.display = 'block';
    canvas.style.touchAction = 'none'; // CRITICAL: Prevents scrolling on touch (research-backed)
    
    document.getElementById('scene-container').appendChild(canvas);

    // Detect mobile devices
    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    console.log('Mobile device detected:', isMobile);
    
    // Check WebGL capabilities and renderer info
    const gl = renderer.getContext();
    console.log('=== DEVICE INFO ===');
    console.log('User Agent:', navigator.userAgent);
    console.log('Mobile detected:', isMobile);
    console.log('Device pixel ratio:', window.devicePixelRatio);
    console.log('=== WEBGL INFO ===');
    console.log('WebGL version:', gl.getParameter(gl.VERSION));
    console.log('WebGL vendor:', gl.getParameter(gl.VENDOR));
    console.log('WebGL renderer:', gl.getParameter(gl.RENDERER));
    console.log('Max texture size:', gl.getParameter(gl.MAX_TEXTURE_SIZE));
    console.log('WebGL context valid:', !gl.isContextLost());
    console.log('Renderer info:', renderer.info);
    
    // CRITICAL: Research-backed context debugging
    console.log('=== RENDERER DEBUG ===');
    console.log('Renderer context:', !!renderer.getContext());
    console.log('Canvas size:', renderer.domElement.width, 'x', renderer.domElement.height);
    console.log('Canvas style size:', renderer.domElement.style.width, 'x', renderer.domElement.style.height);
    console.log('Pixel ratio:', renderer.getPixelRatio());
    // Skip getClearColor() as it's causing errors
    console.log('Clear color: (skipped due to error)');
    console.log('=== SCENE INFO ===');
    console.log('Scene background:', scene.background);

    // Post-processing setup for subtle bloom effect (desktop only)
    let composer = null;
    if (!isMobile) {
      composer = new EffectComposer(renderer);
      
      // Basic render pass
      const renderPass = new RenderPass(scene, camera);
      composer.addPass(renderPass);
      
      // Bloom pass - very subtle
      const bloomPass = new UnrealBloomPass(
        new THREE.Vector2(window.innerWidth, window.innerHeight),
        0.15,   // strength (very subtle)
        0.4,    // radius  
        0.95    // threshold (high = less blooming)
      );
      composer.addPass(bloomPass);
      
      // Output pass for proper color space
      const outputPass = new OutputPass();
      composer.addPass(outputPass);
      
      console.log('Bloom post-processing enabled for desktop');
    } else {
      console.log('Using direct rendering for mobile compatibility');
    }

    // Ultra-simple lighting for maximum mobile compatibility
    const ambientLight = new THREE.AmbientLight(0xffffff, isMobile ? 2.0 : 0.3);
    scene.add(ambientLight);

    // Minimal directional light for mobile
    const directionalLight = new THREE.DirectionalLight(0xffffff, isMobile ? 0.2 : 0.8);
    directionalLight.position.set(5, 5, 5);
    
    // Disable shadows on mobile for better performance and compatibility
    if (!isMobile) {
      directionalLight.castShadow = true;
      directionalLight.shadow.mapSize.width = 2048;
      directionalLight.shadow.mapSize.height = 2048;
      renderer.shadowMap.enabled = true;
    } else {
      renderer.shadowMap.enabled = false;
      console.log('Shadows disabled for mobile compatibility');
    }
    
    scene.add(directionalLight);
    
    console.log('=== LIGHTING INFO ===');
    console.log('Ambient light intensity:', ambientLight.intensity);
    console.log('Directional light intensity:', directionalLight.intensity);
    console.log('Shadows enabled:', renderer.shadowMap.enabled);

    // Initialize object management variables first
    let sceneObjects = [];
    let selectedObject = null;
    let isScreenVisible = true;
    
    // Selection system
    const raycaster = new THREE.Raycaster();
    const mouse = new THREE.Vector2();
    let selectedOutline = null;


    // Add floor - use basic material on mobile for better compatibility
    const floorGeometry = new THREE.PlaneGeometry(20, 20);
    const floorMaterial = isMobile 
      ? new THREE.MeshBasicMaterial({ color: 0x333333 })
      : new THREE.MeshLambertMaterial({ color: 0x333333 });
    const floor = new THREE.Mesh(floorGeometry, floorMaterial);
    floor.rotation.x = -Math.PI / 2;
    floor.position.y = -3;
    if (!isMobile) floor.receiveShadow = true;
    scene.add(floor);
    



    // Create canvas texture for screen content - mobile-optimized sizes
    function createScreenTexture() {
      const canvas = document.createElement('canvas');
      // Use much smaller textures on mobile to avoid GPU memory issues
      if (isMobile) {
        canvas.width = 512;  // Much smaller for mobile
        canvas.height = 288; // Maintain 16:9 ratio
      } else {
        canvas.width = 1920;
        canvas.height = 1080;
      }
      const ctx = canvas.getContext('2d');
      
      ctx.fillStyle = '#001122';
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      ctx.fillStyle = '#00ff00';
      
      // Scale font sizes based on canvas size for mobile compatibility
      const scale = canvas.width / 1920; // Scale relative to desktop size
      
      ctx.font = `bold ${Math.floor(72 * scale)}px Arial`;
      ctx.textAlign = 'center';
      ctx.fillText('LARGE DISPLAY SCREEN', canvas.width/2, canvas.height/2 - Math.floor(80 * scale));
      ctx.font = `bold ${Math.floor(48 * scale)}px Arial`;
      ctx.fillText('Ready for Screen Sharing or Video', canvas.width/2, canvas.height/2 + Math.floor(10 * scale));
      ctx.font = `${Math.floor(32 * scale)}px Arial`;
      ctx.fillText('Use controls to share desktop or load video', canvas.width/2, canvas.height/2 + Math.floor(80 * scale));
      
      const texture = new THREE.CanvasTexture(canvas);
      texture.needsUpdate = true;
      
      // Fix upside down texture orientation
      texture.flipY = false;
      
      // Fix mirrored/reversed texture (flip horizontally)
      texture.wrapS = THREE.RepeatWrapping;
      texture.repeat.x = -1;
      texture.offset.x = 1;
      
      return { texture: texture, canvas: canvas };
    }

    // Load the room model and setup SHARESCREEN object
    let largeScreen = null;
    
    function loadRoomModel() {
      loader.load('./models/BAKE-WEBROOM1.glb', function(gltf) {
        console.log('Loading room model...');
        const roomModel = gltf.scene;
        
        // Add the entire room to the scene
        roomModel.position.set(0, 0, 0);
        roomModel.scale.set(1, 1, 1);
        
        // Enable shadows for all meshes (desktop only)
        roomModel.traverse((child) => {
          if (child.isMesh) {
            if (!isMobile) {
              child.castShadow = true;
              child.receiveShadow = true;
            }
            // Ensure materials are compatible with mobile
            if (child.material && isMobile) {
              // Fix texture loading on mobile - preserve original textures
              if (child.material.map) {
                // Ensure texture uses correct color space
                child.material.map.colorSpace = THREE.SRGBColorSpace;
                child.material.map.needsUpdate = true;
              }
              
              // Only replace material if it's causing issues
              if (child.material.type === 'MeshStandardMaterial' || child.material.type === 'MeshPhysicalMaterial') {
                const basicMaterial = new THREE.MeshBasicMaterial({
                  map: child.material.map, // CRITICAL: Preserve the texture map
                  color: child.material.map ? 0xffffff : (child.material.color || 0xffffff), // White if textured
                  transparent: child.material.transparent || false,
                  opacity: child.material.opacity || 1.0,
                  side: child.material.side || THREE.FrontSide
                });
                child.material = basicMaterial;
                console.log('Replaced material with MeshBasicMaterial, preserved texture:', !!child.material.map);
              }
              
              child.material.needsUpdate = true;
            }
          }
        });
        
        scene.add(roomModel);
        
        // Find the SHARESCREEN object
        let shareScreenObject = null;
        console.log('Searching for SHARESCREEN object in model...');
        roomModel.traverse((child) => {
          if (child.name) {
            console.log('Found object:', child.name, 'Type:', child.type, 'isMesh:', child.isMesh);
            if (child.name === 'SHARESCREEN' || child.name === 'SHARESCREEN-HERE' || child.name.toLowerCase().includes('sharescreen')) {
              shareScreenObject = child;
              console.log('✓ Found SHARESCREEN object:', child.name, child);
            }
          }
        });
        
        console.log('SHARESCREEN search complete. Found:', shareScreenObject ? 'YES' : 'NO');
        
        if (shareScreenObject) {
          // Create screen texture
          const screenTexture = createScreenTexture();
          
          // Apply the texture to the SHARESCREEN object
          console.log('Applying texture to SHARESCREEN object...');
          console.log('Material:', shareScreenObject.material);
          console.log('Material type:', shareScreenObject.material ? shareScreenObject.material.type : 'none');
          
          // Create a new material specifically for screen content  
          const screenMaterial = new THREE.MeshBasicMaterial({ 
            map: screenTexture.texture,
            transparent: false,
            side: THREE.DoubleSide
          });
          
          // Ensure texture color space is correct
          screenTexture.texture.colorSpace = THREE.SRGBColorSpace;
          
          shareScreenObject.material = screenMaterial;
          shareScreenObject.material.needsUpdate = true;
          shareScreenObject.visible = true;
          
          console.log('✓ Applied new MeshBasicMaterial with screen texture');
          console.log('Texture size:', screenTexture.canvas.width, 'x', screenTexture.canvas.height);
          
          // Set up largeScreen object to work with existing code
          largeScreen = {
            screen: shareScreenObject,
            texture: screenTexture.texture,
            canvas: screenTexture.canvas
          };
          
          shareScreenObject.userData = {
            name: 'Large Display Screen',
            type: 'display',
            originalPosition: shareScreenObject.position.clone(),
            originalScale: shareScreenObject.scale.clone(),
            originalRotation: shareScreenObject.rotation.clone(),
            objectId: 'SHARESCREEN-HERE',  // Fixed ID for server reference
            isSelectable: false  // Mark screen as non-selectable
          };
          
          sceneObjects.push(shareScreenObject);
          console.log('SHARESCREEN object configured successfully');
        } else {
          console.warn('SHARESCREEN object not found in model, creating fallback screen');
          createFallbackScreen();
        }
        
        console.log('Room model loaded successfully');
      }, 
      function(progress) {
        console.log('Room loading progress:', (progress.loaded / progress.total * 100) + '%');
      },
      function(error) {
        console.error('Error loading room model:', error);
        console.log('Creating fallback screen instead');
        createFallbackScreen();
      });
    }
    
    // Fallback screen creation if GLB fails to load
    function createFallbackScreen() {
      const screenWidth = 16;
      const screenHeight = 9;
      const screenTexture = createScreenTexture();
      
      const screenGeometry = new THREE.PlaneGeometry(screenWidth, screenHeight);
      const screenMaterial = new THREE.MeshBasicMaterial({ 
        map: screenTexture.texture,
        transparent: false
      });
      
      // Ensure texture color space is correct
      screenTexture.texture.colorSpace = THREE.SRGBColorSpace;
      
      const displayScreen = new THREE.Mesh(screenGeometry, screenMaterial);
      displayScreen.position.set(0, 4.5, -10);
      displayScreen.rotation.y = 0;
      
      scene.add(displayScreen);
      
      largeScreen = {
        screen: displayScreen,
        texture: screenTexture.texture,
        canvas: screenTexture.canvas
      };
      
      displayScreen.userData = {
        name: 'Large Display Screen',
        type: 'display',
        originalPosition: displayScreen.position.clone(),
        originalScale: displayScreen.scale.clone(),
        originalRotation: displayScreen.rotation.clone(),
        objectId: 'SHARESCREEN-HERE',  // Fixed ID for server reference
        isSelectable: false  // Mark screen as non-selectable
      };
      
      sceneObjects.push(displayScreen);
    }
    
    // Screen sharing and video functionality
    let currentStream = null;
    let currentVideo = null;
    
    // User count display and user list management
    function updateUserCount(count) {
      const userCountElement = document.getElementById('user-count');
      if (userCountElement) {
        userCountElement.textContent = `👥 Users: ${count}`;
      }
    }
    
    // Visitor count display (Disabled)
    /*
    function updateVisitorCount(count) {
      const visitorCountElement = document.getElementById('visitor-count-number');
      if (visitorCountElement) {
        // Format number with commas for large numbers
        const formattedCount = count.toLocaleString();
        visitorCountElement.textContent = formattedCount;
      }
    }
    */
    
    // Initialize Cloudflare visitor counter (Disabled)
    /*
    async function initializeCloudflareVisitorCounter() {
      try {
        // Try multiple possible worker URLs
        const WORKER_URLS = [
          'https://visitor-counter.metamike.workers.dev',
          'https://visitor-counter.mikecerqua.workers.dev',
          'https://visitor-counter.threejs-multiuser.workers.dev'
        ];
        
        // Generate or retrieve a unique visitor ID for this browser
        let visitorId = localStorage.getItem('visitorId');
        if (!visitorId) {
          visitorId = 'visitor_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
          localStorage.setItem('visitorId', visitorId);
        }
        
        // Try each URL until one works
        let success = false;
        for (const CLOUDFLARE_API of WORKER_URLS) {
          try {
            // Increment the visitor count
            const response = await fetch(`${CLOUDFLARE_API}/increment`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              }
            });
            
            if (response.ok) {
              const data = await response.json();
              if (data.count !== undefined) {
                updateVisitorCount(data.count);
                console.log(`✅ Cloudflare visitor count: ${data.count} from ${CLOUDFLARE_API}`);
                success = true;
                break;
              }
            }
          } catch (err) {
            console.log(`Failed to connect to ${CLOUDFLARE_API}:`, err.message);
          }
        }
        
        if (!success) {
          console.warn('Could not connect to any Cloudflare Worker URL');
          // Use Railway backend as fallback for visitor counting
          useRailwayVisitorCounter();
        }
      } catch (error) {
        console.error('Error connecting to Cloudflare visitor counter:', error);
        // Continue with the app even if visitor counter fails
        useRailwayVisitorCounter();
      }
    }
    */
    
    // Fallback visitor counter using Railway backend (Disabled)
    /*
    async function useRailwayVisitorCounter() {
      try {
        // Use the Railway backend to store visitor count
        if (socket && socket.connected) {
          socket.emit('visitor-increment', { visitorId: localStorage.getItem('visitorId') });
          socket.on('visitor-count', (data) => {
            if (data.count !== undefined) {
              updateVisitorCount(data.count);
              console.log(`✅ Railway visitor count: ${data.count}`);
            }
          });
        }
      } catch (error) {
        console.error('Error with Railway visitor counter:', error);
      }
    }
    */
    
    // Space name display
    function updateSpaceName(spaceName) {
      // You can add space name display if needed
      console.log('Connected to space:', spaceName);
    }

    function updateUserList() {
      console.log('🔧 updateUserList called, myUserId:', myUserId, 'userAvatars size:', userAvatars.size);
      const userListContent = document.getElementById('user-list-content');
      const currentUserElement = document.getElementById('current-user');
      
      if (!userListContent) {
        console.log('❌ userListContent not found');
        return;
      }
      
      // Clear existing user items (except current user)
      const userItems = userListContent.querySelectorAll('.user-item:not(.self)');
      userItems.forEach(item => item.remove());
      
      // Update current user with clickable name
      if (currentUserElement && myUserId) {
        // Find current user data
        let currentUser = userAvatars.get(myUserId);
        if (!currentUser) {
          // This should not happen, but provide fallback
          currentUser = { username: `User${myUserId.substr(0,4)}` };
          userAvatars.set(myUserId, currentUser);
        }
        console.log('🔧 Current user for name editing:', currentUser);
        
        // Clear and recreate current user element
        currentUserElement.innerHTML = '';
        
        const nameSpan = document.createElement('span');
        nameSpan.className = 'editable-name';
        nameSpan.textContent = currentUser.username;
        nameSpan.style.cursor = 'pointer';
        nameSpan.style.textDecoration = 'underline';
        nameSpan.style.color = '#4CAF50';
        nameSpan.title = 'Click to edit your name';
        
        nameSpan.addEventListener('click', (e) => {
          console.log('📝 Name span clicked!', e);
          e.preventDefault();
          e.stopPropagation();
          editUserName();
        });
        
        const youLabel = document.createElement('span');
        youLabel.textContent = ' (You)';
        youLabel.style.color = '#ccc';
        
        currentUserElement.appendChild(nameSpan);
        currentUserElement.appendChild(youLabel);
      }
      
      // Add other users
      userAvatars.forEach((avatar, userId) => {
        if (userId !== myUserId) {
          const userItem = document.createElement('div');
          userItem.className = 'user-item';
          userItem.textContent = avatar.username;
          userListContent.appendChild(userItem);
        }
      });
      
      // Update user count badge
      const userCountBadge = document.getElementById('user-count-badge');
      const totalUsers = userAvatars.size; // This includes all users including the current user
      if (userCountBadge) {
        userCountBadge.textContent = `(${totalUsers})`;
      }
    }

    function editUserName() {
      console.log('🔧 editUserName called, myUserId:', myUserId);
      const currentUserElement = document.getElementById('current-user');
      console.log('🔧 currentUserElement:', currentUserElement);
      if (!currentUserElement || !myUserId) {
        console.log('❌ editUserName: Missing currentUserElement or myUserId');
        return;
      }
      
      // Find current user data
      let currentUser = userAvatars.get(myUserId);
      if (!currentUser) {
        // This should not happen, but provide fallback
        currentUser = { username: `User${myUserId.substr(0,4)}` };
        userAvatars.set(myUserId, currentUser);
      }
      console.log('🔧 editUserName currentUser:', currentUser);
      
      // Create input field
      const input = document.createElement('input');
      input.type = 'text';
      input.value = currentUser.username;
      input.maxLength = 20;
      input.style.cssText = `
        background: rgba(0,0,0,0.8);
        border: 1px solid #4CAF50;
        color: white;
        padding: 2px 5px;
        border-radius: 3px;
        font-size: 12px;
        width: 80px;
      `;
      
      // Replace name span with input
      const nameSpan = currentUserElement.querySelector('.editable-name');
      if (nameSpan) {
        nameSpan.style.display = 'none';
        currentUserElement.insertBefore(input, nameSpan);
        input.focus();
        input.select();
        
        const saveChanges = () => {
          const newName = input.value.trim();
          if (newName && newName !== currentUser.username && newName.length <= 20) {
            // Update locally
            if (userAvatars.has(myUserId)) {
              userAvatars.get(myUserId).username = newName;
            }
            
            // Emit name change to server
            if (socket && socket.connected) {
              socket.emit('user-name-change', { 
                userId: myUserId, 
                newName: newName 
              });
            }
            
            // Update avatar label
            updateAvatarLabel(myUserId, newName);
          }
          
          // Restore normal display
          input.remove();
          nameSpan.style.display = 'inline';
          updateUserList();
        };
        
        const cancelChanges = () => {
          input.remove();
          nameSpan.style.display = 'inline';
        };
        
        input.addEventListener('blur', saveChanges);
        input.addEventListener('keydown', (e) => {
          if (e.key === 'Enter') {
            e.preventDefault();
            saveChanges();
          } else if (e.key === 'Escape') {
            e.preventDefault();
            cancelChanges();
          }
        });
      }
    }

    // P2P Main Room functionality
    let socket = null;
    let peers = {};
    const MAIN_ROOM = 'MAIN_SHARED_ROOM';
    let inRoom = false;
    let roomUsers = [];
    let myUserId = null;
    
    // WebRTC P2P for video streaming (separate from server coordination)
    const videoPeers = {};
    let isScreenSharing = false;
    
    // Simple P2P using BroadcastChannel for same-origin communication
    let broadcastChannel = null;
    let activeStreams = new Map(); // Track active streams from other tabs
    
    // Welcome dialog functionality
    let userChosenName = '';
    
    function showWelcomeDialog() {
      const welcomeDialog = document.getElementById('welcome-dialog');
      const welcomeOverlay = document.getElementById('welcome-overlay');
      const welcomeInput = document.getElementById('welcome-input');
      const welcomeButton = document.getElementById('welcome-button');
      
      // Focus input
      welcomeInput.focus();
      
      // Handle name submission
      function submitName() {
        const name = welcomeInput.value.trim();
        if (name && name.length <= 20) {
          userChosenName = name;
        }
        
        // Hide welcome dialog
        welcomeDialog.style.display = 'none';
        welcomeOverlay.style.display = 'none';
        
        // Initialize room system with chosen name
        initializeRoomSystem();
      }
      
      // Submit on button click
      welcomeButton.addEventListener('click', submitName);
      
      // Submit on Enter key
      welcomeInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
          submitName();
        }
      });
    }
    
    function initializeRoomSystem() {
      console.log('🚀 Initializing WebRTC P2P with Railway Socket.IO signaling...');
      
      // Connect to Railway Socket.IO server (not Netlify which only serves static files)
      const SIGNALING_SERVER = window.location.hostname === 'localhost' 
        ? 'http://localhost:3001'  // Local development
        : 'https://3d-threejs-site-production.up.railway.app';  // Railway backend
      
      // Cloudflare Worker API for persistent visitor counter
      const VISITOR_COUNTER_API = 'https://visitor-counter.mikecerqua.workers.dev';
      
      try {
        // Use Socket.IO for Railway server
        socket = io(SIGNALING_SERVER, {
          transports: ['websocket', 'polling'],
          reconnection: true,
          reconnectionDelay: 1000,
          reconnectionAttempts: 5,
          autoConnect: true
        });
        
        socket.on('connect', () => {
          console.log('✅ Connected to persistent world server!');
          console.log('🎉 Server-mediated world sharing is now enabled!');
          inRoom = true;
          myUserId = socket.id;
          
          // Clear all existing avatars on reconnection
          userAvatars.forEach((avatar, userId) => {
            if (avatar.mesh) {
              scene.remove(avatar.mesh);
            }
          });
          userAvatars.clear();
          customAvatarModels.clear();
          
          // Update user interface
          updateUserList();
          
          // Initialize current user data with chosen name or generate one
          const initialUsername = userChosenName || `User${socket.id.substr(0,4)}`;
          userAvatars.set(myUserId, { username: initialUsername });
          
          // Spawn user avatar in world
          socket.emit('user-spawn', {
            position: { x: 0, y: 0, z: 5 },
            rotation: { x: 0, y: 0, z: 0 },
            username: initialUsername,
            customAvatarUrl: myCustomAvatarUrl
          });
        });
        
        // ===== WORLD STATE SYNCHRONIZATION =====
        socket.on('world-state', (worldData) => {
          console.log('🌍 Received world state:', worldData);
          
          // Apply persistent object positions
          worldData.objects.forEach(([objectId, state]) => {
            updateObjectInScene(objectId, state);
          });
          
          // Spawn existing user avatars
          worldData.users.forEach(([userId, avatar]) => {
            if (userId !== socket.id) {
              console.log(`🧑‍🤝‍🧑 Spawning existing user: ${avatar.username} (${userId})`);
              spawnUserAvatar(userId, avatar);
            }
          });
          
          // Apply shared screen if active
          if (worldData.sharedScreen) {
            handleRemoteScreenShare(worldData.sharedScreen);
          }
          
          // Load chat history
          if (worldData.chatHistory) {
            worldData.chatHistory.forEach(msg => displayChatMessage(msg));
          }
          
          // Update user count from world state
          console.log('🌍 World state users:', worldData.users.length);
          updateUserCount(worldData.users.length);
          updateUserList();
          
          // Skip Railway visitor count - using Cloudflare instead
          // if (worldData.visitorCount !== undefined) {
          //   updateVisitorCount(worldData.visitorCount);
          // }
          
          // Update space name if provided
          if (worldData.spaceName) {
            updateSpaceName(worldData.spaceName);
          }
        });
        
        socket.on('user-joined', (avatar) => {
          // Don't spawn avatar for current user (they have their own local avatar)
          if (avatar.id !== socket.id) {
            spawnUserAvatar(avatar.id, avatar);
          }
          // User count will be updated by server via 'user-count-update' event
          updateUserList();
          
          // If we're currently screen sharing, establish P2P connection with new user
          if (isScreenSharing && currentStream && currentStream.active) {
            console.log(`🔗 Establishing P2P connection with new user ${avatar.id} for screen sharing`);
            connectToPeer(avatar.id, true); // We're the initiator since we're sharing
          }
        });
        
        socket.on('user-left', (data) => {
          removeUserAvatar(data.userId);
          // User count will be updated by server via 'user-count-update' event
          updateUserList();
        });
        
        // ===== PERSISTENT OBJECT INTERACTIONS =====
        socket.on('object-added', (data) => {
          console.log(`📦 New object ${data.objectId} (${data.name}) added by ${data.addedBy}`);
          // TODO: Need to create object in scene from server data
          // This would require storing object type/model data on server
        });

        socket.on('object-moved', (data) => {
          console.log(`📦 Object ${data.objectId} moved by ${data.movedBy}`);
          updateObjectInScene(data.objectId, {
            position: data.position,
            rotation: data.rotation,
            scale: data.scale
          });
        });

        socket.on('object-deleted', (data) => {
          console.log(`🗑️ Object ${data.objectId} deleted by ${data.deletedBy}`);
          removeObjectFromScene(data.objectId);
        });
        
        // ===== USER AVATAR EVENTS =====
        socket.on('user-moved', (data) => {
          moveUserAvatar(data.userId, data.position, data.rotation);
        });
        
        socket.on('user-name-changed', (data) => {
          console.log(`📝 User ${data.userId} changed name from "${data.oldName}" to "${data.newName}"`);
          
          // Update local avatar data
          if (userAvatars.has(data.userId)) {
            userAvatars.get(data.userId).username = data.newName;
            updateAvatarLabel(data.userId, data.newName);
          }
          
          // IMPORTANT: If this is the current user, update their stored username
          if (data.userId === myUserId) {
            // Create/update the current user's avatar data
            if (!userAvatars.has(myUserId)) {
              userAvatars.set(myUserId, { username: data.newName });
            } else {
              userAvatars.get(myUserId).username = data.newName;
            }
          }
          
          // Update user list display
          updateUserList();
          
          // Show notification in chat
          const nameChangeMessage = {
            username: 'System',
            message: `${data.oldName} changed their name to ${data.newName}`,
            timestamp: new Date().toISOString(),
            isSystem: true
          };
          displayChatMessage(nameChangeMessage);
        });
        
        socket.on('user-avatar-updated', (data) => {
          console.log(`🎭 User ${data.userId} updated their avatar`);
          
          // Remove old avatar
          removeUserAvatar(data.userId);
          
          // Spawn new avatar with custom model
          const userInfo = userAvatars.get(data.userId);
          if (userInfo) {
            const avatarData = {
              id: data.userId,
              position: data.position || { x: 0, y: 0, z: 0 },
              rotation: data.rotation || { x: 0, y: 0, z: 0 },
              username: userInfo.username,
              customAvatarUrl: data.customAvatarUrl
            };
            
            // Only spawn avatar for other users (not self)
            if (data.userId !== myUserId) {
              spawnUserAvatar(data.userId, avatarData);
            }
          }
        });
        
        // ===== SCREEN SHARING EVENTS =====
        socket.on('screen-share-started', (data) => {
          console.log(`📺 Screen sharing started by ${data.userId}:`, data);
          handleRemoteScreenShare(data);
          
          // Don't initiate P2P connection here - let the screen sharer do it
          console.log(`🔗 Ready to receive P2P connection from ${data.userId} for screen sharing`);
        });
        
        socket.on('screen-share-stopped', (data) => {
          console.log(`📺 Screen sharing stopped by ${data.userId}:`, data);
          clearScreenShare(data.clearObject);
          
          // Close P2P connection
          if (peers[data.userId]) {
            peers[data.userId].destroy();
            delete peers[data.userId];
          }
        });
        
        // ===== WEBRTC P2P SIGNALING =====
        socket.on('webrtc-offer', (data) => {
          console.log(`📨 *** RECEIVED WEBRTC OFFER FROM ${data.from} ***`);
          console.log('📨 Offer data:', data.offer);
          if (!peers[data.from]) {
            console.log(`🔗 Creating peer connection to handle offer from ${data.from}`);
            connectToPeer(data.from, false, data.offer);
          } else {
            console.log(`⚠️ Peer ${data.from} already exists, ignoring offer`);
          }
        });
        
        socket.on('webrtc-answer', (data) => {
          console.log(`📨 *** RECEIVED WEBRTC ANSWER FROM ${data.from} ***`);
          if (peers[data.from]) {
            console.log(`✅ Signaling answer to existing peer ${data.from}`);
            peers[data.from].signal(data.answer);
          } else {
            console.log(`❌ No peer found for answer from ${data.from}`);
          }
        });
        
        socket.on('webrtc-ice-candidate', (data) => {
          console.log(`📨 *** RECEIVED WEBRTC ICE CANDIDATE FROM ${data.from} ***`);
          if (peers[data.from]) {
            peers[data.from].signal(data.candidate);
          } else {
            console.log(`❌ No peer found for ICE candidate from ${data.from}`);
          }
        });
        
        // ===== CHAT SYSTEM =====
        socket.on('chat-message', (message) => {
          displayChatMessage(message);
        });
        
        // ===== VISITOR COUNT UPDATE (disabled - using Cloudflare) =====
        socket.on('visitor-count-update', (data) => {
          // Skip Railway visitor count - using Cloudflare instead
          // if (data.visitorCount !== undefined) {
          //   updateVisitorCount(data.visitorCount);
          // }
        });
        
        // ===== USER COUNT UPDATE =====
        socket.on('user-count-update', (data) => {
          if (data.count !== undefined) {
            console.log('👥 User count update:', data.count);
            updateUserCount(data.count);
          }
        });
        
        socket.on('disconnect', () => {
          console.log('🔌 Disconnected from signaling server');
          inRoom = false;
        });
        
        socket.on('error', (error) => {
          console.error('❌ Signaling server error:', error);
        });
        
      } catch (error) {
        console.error('❌ Failed to initialize P2P:', error);
        console.log('💡 Screen sharing will work locally only');
      }
    }
    
    function sendMessage(message) {
      if (socket && socket.connected) {
        console.log('📤 Sending:', message);
        socket.emit(message.type, message);
      } else {
        console.warn('⚠️ Cannot send message, socket not connected:', message);
      }
    }
    
    // Note: handleSignalingMessage removed - using Socket.IO event handlers directly
    
    
    function connectToPeer(userId, initiator, initialSignal = null) {
      console.log(`🔗 Connecting to peer ${userId}, initiator: ${initiator}, hasStream: ${!!currentStream}`);
      
      // Don't create duplicate connections
      if (peers[userId]) {
        console.log(`⚠️ Peer ${userId} already exists, skipping`);
        return;
      }
      
      console.log(`🔧 Creating SimplePeer for ${userId}: initiator=${initiator}, hasStream=${!!currentStream}`);
      if (currentStream) {
        console.log(`📹 currentStream details: active=${currentStream.active}, tracks=${currentStream.getTracks().length}`);
      }
      
      const peer = new SimplePeer({
        initiator: initiator,
        trickle: false,
        stream: currentStream || undefined, // Share current stream if available
        config: {
          iceServers: [
            { urls: 'stun:stun.l.google.com:19302' },
            { urls: 'stun:stun1.l.google.com:19302' },
            { urls: 'stun:stun2.l.google.com:19302' }
          ]
        },
        offerOptions: {
          offerToReceiveVideo: true,
          offerToReceiveAudio: true
        }
      });
      
      peers[userId] = peer;
      
      peer.on('signal', (data) => {
        console.log(`📤 *** SENDING WEBRTC SIGNAL TO ${userId} ***`);
        console.log(`📤 Signal type: ${data.type || 'unknown'}`);
        console.log(`📤 Signal data:`, data);
        
        // Use specific events for better reliability
        if (data.type === 'offer') {
          console.log(`📤 Emitting webrtc-offer to ${userId}`);
          socket.emit('webrtc-offer', {
            to: userId,
            offer: data
          });
        } else if (data.type === 'answer') {
          console.log(`📤 Emitting webrtc-answer to ${userId}`);
          socket.emit('webrtc-answer', {
            to: userId,
            answer: data
          });
        } else if (data.candidate) {
          console.log(`📤 Emitting webrtc-ice-candidate to ${userId}`);
          socket.emit('webrtc-ice-candidate', {
            to: userId,
            candidate: data
          });
        } else {
          console.log(`📤 Emitting generic signal to ${userId}`);
          // Fallback to generic signal
          socket.emit('signal', {
            to: userId,
            signal: data
          });
        }
      });
      
      peer.on('stream', (stream) => {
        console.log(`🎥 *** RECEIVED STREAM FROM PEER ${userId} ***`, stream);
        console.log(`🎥 Stream active: ${stream.active}, tracks: ${stream.getTracks().length}`);
        
        stream.getTracks().forEach((track, index) => {
          console.log(`🎵 Track ${index}: kind=${track.kind}, enabled=${track.enabled}, readyState=${track.readyState}`);
        });
        
        // Display received stream on the large screen
        console.log(`🖥️ Calling displaySharedStream...`);
        displaySharedStream(stream);
      });
      
      peer.on('error', (err) => {
        console.error('Peer error:', err);
      });
      
      peer.on('close', () => {
        delete peers[userId];
      });
      
      peer.on('connect', () => {
        console.log(`🤝 *** PEER CONNECTED: ${userId} ***`);
        console.log(`🤝 P2P connection established successfully with ${userId}`);
        // If we have an active screen share, add it to the new peer
        if (currentStream && currentStream.active) {
          console.log(`📹 Adding existing screen share to newly connected peer ${userId}`);
          try {
            peer.addStream(currentStream);
            console.log(`✅ Successfully added stream to peer ${userId}`);
          } catch (error) {
            console.error(`❌ Failed to add stream to peer ${userId}:`, error);
          }
        }
      });
      
      if (initialSignal) {
        peer.signal(initialSignal);
      }
    }
    
    
    function handleRemoteScreenStop(senderId) {
      const indicator = document.getElementById(`remote-indicator-${senderId}`);
      if (indicator) {
        indicator.remove();
      }
      
      // Reset screen content if no other remote shares
      if (!document.querySelector('[id^="remote-indicator-"]')) {
        resetScreenContent();
      }
    }
    
    function displaySharedStream(stream) {
      console.log(`🖥️ *** DISPLAYING SHARED STREAM ***`);
      console.log(`📺 Stream details: active=${stream.active}, tracks=${stream.getTracks().length}`);
      
      // Remove any existing video element
      const existingVideo = document.getElementById('remote-screen-video');
      if (existingVideo) {
        existingVideo.remove();
      }
      
      const videoEl = document.createElement('video');
      videoEl.id = 'remote-screen-video';
      videoEl.srcObject = stream;
      videoEl.autoplay = true;
      videoEl.muted = false; // Allow audio playback
      videoEl.playsInline = true;
      videoEl.volume = 1.0; // Full volume
      videoEl.style.display = 'none';
      document.body.appendChild(videoEl);
      
      console.log(`📺 Created video element, autoplay=${videoEl.autoplay}`);
      
      // Store reference for cleanup
      window.remoteVideoElement = videoEl;
      
      function updateScreenFromPeer() {
        if (videoEl.readyState >= videoEl.HAVE_CURRENT_DATA && largeScreen && largeScreen.canvas) {
          const ctx = largeScreen.canvas.getContext('2d');
          
          // Clear canvas first
          ctx.clearRect(0, 0, largeScreen.canvas.width, largeScreen.canvas.height);
          
          // Draw video to fit canvas
          if (videoEl.videoWidth > 0 && videoEl.videoHeight > 0) {
            ctx.drawImage(videoEl, 0, 0, largeScreen.canvas.width, largeScreen.canvas.height);
            largeScreen.texture.needsUpdate = true;
            
            // Only log occasionally to avoid spam
            if (Math.random() < 0.01) {
              console.log(`🎬 Updating screen texture from P2P video (${videoEl.videoWidth}x${videoEl.videoHeight})`);
            }
          }
        }
        
        if (stream.active && !videoEl.paused) {
          requestAnimationFrame(updateScreenFromPeer);
        } else {
          console.log(`🛑 P2P stream stopped: active=${stream.active}, paused=${videoEl.paused}`);
        }
      }
      
      // Ensure video plays
      const playVideo = async () => {
        try {
          await videoEl.play();
          console.log(`▶️ Video playing successfully`);
          updateScreenFromPeer();
        } catch (err) {
          console.error('Failed to play video:', err);
          // Retry with muted if autoplay policy blocks it
          videoEl.muted = true;
          try {
            await videoEl.play();
            console.log(`▶️ Video playing (muted due to autoplay policy)`);
            updateScreenFromPeer();
          } catch (err2) {
            console.error('Failed to play video even when muted:', err2);
          }
        }
      };
      
      videoEl.addEventListener('loadedmetadata', () => {
        console.log(`📹 Video metadata loaded: ${videoEl.videoWidth}x${videoEl.videoHeight}`);
        playVideo();
      });
      
      videoEl.addEventListener('canplay', () => {
        console.log(`📹 Video can play: ${videoEl.videoWidth}x${videoEl.videoHeight}`);
      });
      
      videoEl.addEventListener('error', (e) => {
        console.error('📹 Video error:', e);
      });
    }
    
    
    
    async function startScreenShare() {
      try {
        const stream = await navigator.mediaDevices.getDisplayMedia({
          video: { 
            width: { ideal: 1920, max: 1920 }, 
            height: { ideal: 1080, max: 1080 },
            frameRate: { ideal: 30, max: 60 }
          },
          audio: {
            echoCancellation: true,
            noiseSuppression: true,
            sampleRate: 44100
          }
        });
        
        currentStream = stream;
        
        // Validate stream
        console.log(`📺 Got screen share stream: ${stream.id}`);
        console.log(`📺 Video tracks: ${stream.getVideoTracks().length}`);
        console.log(`📺 Audio tracks: ${stream.getAudioTracks().length}`);
        
        const videoEl = document.getElementById('video-element');
        videoEl.srcObject = stream;
        videoEl.muted = false; // Ensure screen sharing audio is not muted
        videoEl.volume = 1.0; // Set volume to maximum
        
        // Force play
        videoEl.play().catch(err => {
          console.warn('Autoplay failed, trying muted:', err);
          videoEl.muted = true;
          videoEl.play();
        });
        
        function updateScreenTexture() {
          if (videoEl.readyState >= videoEl.HAVE_CURRENT_DATA && largeScreen && largeScreen.canvas) {
            const ctx = largeScreen.canvas.getContext('2d');
            ctx.drawImage(videoEl, 0, 0, largeScreen.canvas.width, largeScreen.canvas.height);
            largeScreen.texture.needsUpdate = true;
          }
          
          if (currentStream && currentStream.active) {
            requestAnimationFrame(updateScreenTexture);
          }
        }
        
        videoEl.addEventListener('loadeddata', () => {
          console.log(`📺 Screen share video loaded: ${videoEl.videoWidth}x${videoEl.videoHeight}`);
          updateScreenTexture();
        });
        
        stream.getVideoTracks()[0].addEventListener('ended', () => stopScreenShare());
        
        // ===== SERVER-MEDIATED SCREEN SHARING =====
        if (socket && socket.connected) {
          socket.emit('screen-share-start', {
            streamId: stream.id,
            hasVideo: stream.getVideoTracks().length > 0,
            hasAudio: stream.getAudioTracks().length > 0
          });
          console.log('📺 Notified server of screen sharing start');
        }
        
        // ===== WEBRTC P2P FOR ACTUAL VIDEO STREAMING =====
        isScreenSharing = true;
        
        // Small delay to ensure stream is fully initialized
        setTimeout(() => {
          // Connect to ALL users in the room for direct video streaming
          console.log(`🔗 Establishing P2P connections with ${userAvatars.size} users for screen sharing`);
          console.log(`🔗 Current stream active: ${currentStream.active}, video tracks: ${currentStream.getVideoTracks().length}`);
          
          // Destroy existing peers and recreate with stream
          Array.from(userAvatars.keys()).forEach(userId => {
            console.log(`🔗 Connecting to user ${userId} for screen sharing`);
            
            // Always recreate peer connection with stream for screen sharing
            if (peers[userId]) {
              console.log(`🔄 Destroying existing peer connection with ${userId}`);
              peers[userId].destroy();
              delete peers[userId];
            }
            
            // Create new P2P connection with the stream
            console.log(`🆕 Creating new P2P connection with ${userId} for screen sharing`);
            connectToPeer(userId, true); // We're the initiator (screen sharer)
          });
        }, 100);
        
        // For users who join later, they'll connect via the screen-share-started event
        
        console.log('✅ Screen sharing started successfully!');
        
      } catch (error) {
        console.error('Error starting screen share:', error);
        alert('Screen sharing failed. Please make sure you allow screen access.');
      }
    }
    
    function stopScreenShare() {
      if (currentStream) {
        currentStream.getTracks().forEach(track => track.stop());
        currentStream = null;
        document.getElementById('video-element').srcObject = null;
        resetScreenContent();
        // ===== SERVER-MEDIATED SCREEN SHARING STOP =====
        if (socket && socket.connected) {
          socket.emit('screen-share-stop');
          console.log('📺 Notified server of screen sharing stop');
        }
        
        // ===== WEBRTC P2P CLEANUP =====
        isScreenSharing = false;
        
        console.log('🛑 Screen sharing stopped');
        
        // Hide stop button, show share button
        document.getElementById('stop-sharing').style.display = 'none';
        document.getElementById('share-screen').style.display = 'inline-block';
      }
    }
    
    function loadVideoFile(file) {
      if (currentStream) stopScreenShare();
      
      const videoEl = document.getElementById('video-element');
      const url = URL.createObjectURL(file);
      videoEl.src = url;
      videoEl.loop = true;
      videoEl.muted = false; // Ensure audio is not muted
      videoEl.volume = 1.0; // Set volume to maximum
      
      currentVideo = { file: file, url: url };
      
      function updateVideoTexture() {
        if (videoEl.readyState >= videoEl.HAVE_CURRENT_DATA && largeScreen && largeScreen.canvas) {
          const ctx = largeScreen.canvas.getContext('2d');
          ctx.drawImage(videoEl, 0, 0, largeScreen.canvas.width, largeScreen.canvas.height);
          largeScreen.texture.needsUpdate = true;
        }
        
        if (currentVideo && !videoEl.paused) {
          requestAnimationFrame(updateVideoTexture);
        }
      }
      
      videoEl.addEventListener('loadeddata', () => {
        updateVideoTexture();
        
        // Create MediaStream from video element for WebRTC sharing
        if (socket && socket.connected) {
          try {
            // Create canvas for video stream
            const canvas = document.createElement('canvas');
            canvas.width = 1920;
            canvas.height = 1080;
            const ctx = canvas.getContext('2d');
            
            // Function to draw video to canvas
            function drawVideoToCanvas() {
              if (videoEl.readyState >= videoEl.HAVE_CURRENT_DATA) {
                ctx.drawImage(videoEl, 0, 0, canvas.width, canvas.height);
              }
              if (currentVideo && !videoEl.paused) {
                requestAnimationFrame(drawVideoToCanvas);
              }
            }
            
            // Start drawing
            drawVideoToCanvas();
            
            // Capture canvas as stream
            const videoStream = canvas.captureStream(30); // 30 fps
            
            // Try to capture audio from the video element
            let audioStream = null;
            if (videoEl.captureStream) {
              // Modern browsers support captureStream on video elements
              const fullStream = videoEl.captureStream();
              const audioTracks = fullStream.getAudioTracks();
              if (audioTracks.length > 0) {
                audioStream = new MediaStream(audioTracks);
                console.log('🔊 Captured audio tracks from video:', audioTracks.length);
              }
            } else if (videoEl.mozCaptureStream) {
              // Firefox compatibility
              const fullStream = videoEl.mozCaptureStream();
              const audioTracks = fullStream.getAudioTracks();
              if (audioTracks.length > 0) {
                audioStream = new MediaStream(audioTracks);
                console.log('🔊 Captured audio tracks from video (Firefox):', audioTracks.length);
              }
            }
            
            // Combine video and audio streams
            if (audioStream) {
              audioStream.getAudioTracks().forEach(track => {
                videoStream.addTrack(track);
                console.log('🎵 Added audio track to stream');
              });
            } else {
              console.log('⚠️ No audio tracks found in video file');
            }
            
            currentStream = videoStream;
            isScreenSharing = true;
            
            // Notify server about video file sharing
            socket.emit('screen-share-start', {
              streamId: videoStream.id,
              hasVideo: true,
              hasAudio: audioStream !== null,
              isVideoFile: true,
              fileName: file.name
            });
            
            console.log('📹 Video file sharing started:', file.name);
            
            // Connect to existing users with P2P
            userAvatars.forEach((avatar, userId) => {
              if (userId !== myUserId) {
                console.log(`🔗 Connecting to ${userId} for video file sharing`);
                connectToPeer(userId, true);
              }
            });
            
            // Update UI
            document.getElementById('share-screen').style.display = 'none';
            document.getElementById('stop-sharing').style.display = 'inline-block';
            
          } catch (error) {
            console.error('❌ Failed to create stream from video file:', error);
          }
        }
      });
      
      videoEl.addEventListener('play', () => updateVideoTexture());
      
      videoEl.play();
      console.log('Video loaded:', file.name);
    }
    
    function clearScreen() {
      if (currentStream) stopScreenShare();
      
      if (currentVideo) {
        const videoEl = document.getElementById('video-element');
        videoEl.pause();
        videoEl.src = '';
        URL.revokeObjectURL(currentVideo.url);
        currentVideo = null;
        
        // Also stop any WebRTC sharing
        if (isScreenSharing) {
          stopScreenShare();
        }
      }
      
      resetScreenContent();
    }
    
    function resetScreenContent() {
      if (!largeScreen || !largeScreen.canvas) {
        console.warn('Cannot reset screen content - largeScreen not ready');
        return;
      }
      
      // Clean up any remote video elements
      const remoteVideo = document.getElementById('remote-screen-video');
      if (remoteVideo) {
        if (remoteVideo.srcObject) {
          remoteVideo.srcObject.getTracks().forEach(track => track.stop());
          remoteVideo.srcObject = null;
        }
        remoteVideo.remove();
        window.remoteVideoElement = null;
      }
      
      const ctx = largeScreen.canvas.getContext('2d');
      ctx.fillStyle = '#001122';
      ctx.fillRect(0, 0, largeScreen.canvas.width, largeScreen.canvas.height);
      ctx.fillStyle = '#00ff00';
      
      // Scale font sizes based on canvas size for mobile compatibility
      const scale = largeScreen.canvas.width / 1920; // Scale relative to desktop size
      
      ctx.font = `bold ${Math.floor(72 * scale)}px Arial`;
      ctx.textAlign = 'center';
      ctx.fillText('LARGE DISPLAY SCREEN', largeScreen.canvas.width/2, largeScreen.canvas.height/2 - Math.floor(80 * scale));
      ctx.font = `bold ${Math.floor(48 * scale)}px Arial`;
      ctx.fillText('Ready for Screen Sharing or Video', largeScreen.canvas.width/2, largeScreen.canvas.height/2 + Math.floor(10 * scale));
      ctx.font = `${Math.floor(32 * scale)}px Arial`;
      ctx.fillText('Use controls to share desktop or load video', largeScreen.canvas.width/2, largeScreen.canvas.height/2 + Math.floor(80 * scale));
      
      largeScreen.texture.needsUpdate = true;
    }

    // User object position - positioned at couch facing the screen (further back and slightly higher)
    userObject.position.set(0, 2, -4);
    // Camera is now at origin relative to user object
    camera.position.set(0, 0, 0);
    camera.lookAt(0, 0, -4); // Look forward relative to user object

    // Mobile controls
    let isMoving = false;
    let lastTap = 0;
    let cameraRotation = { x: 0, y: Math.PI };
    let isDragging = false;
    let previousMousePosition = { x: 0, y: 0 };

    // Screen dismissal functionality
    const screenElement = document.getElementById('interactive-screen');
    const dragOverlay = document.getElementById('drag-overlay');
    const modelControls = document.getElementById('model-controls');

    function hideScreen() {
      if (isScreenVisible) {
        screenElement.style.display = 'none';
        isScreenVisible = false;
      }
    }

    screenElement.addEventListener('click', hideScreen);

    // Object selection functions
    function checkObjectSelection(event) {
      mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;
      
      raycaster.setFromCamera(mouse, camera);
      const intersects = raycaster.intersectObjects(sceneObjects, true);
      
      if (intersects.length > 0) {
        let targetObject = intersects[0].object;
        
        while (targetObject.parent && !sceneObjects.includes(targetObject)) {
          targetObject = targetObject.parent;
        }
        
        if (sceneObjects.includes(targetObject)) {
          // Check if object is selectable (skip the share screen)
          if (targetObject.userData.isSelectable !== false) {
            selectObject(targetObject);
          }
        }
      } else {
        deselectObject();
      }
    }
    
    function selectObject(object) {
      if (selectedObject) clearSelection();
      
      selectedObject = object;
      addSelectionIndicator(object);
      modelControls.classList.add('visible');
      document.getElementById('selected-object-name').textContent = object.userData.name || 'Unknown Object';
    }
    
    function deselectObject() {
      if (selectedObject) {
        clearSelection();
        selectedObject = null;
        modelControls.classList.remove('visible');
      }
    }
    
    function clearSelection() {
      if (selectedOutline) {
        scene.remove(selectedOutline);
        selectedOutline = null;
      }
    }
    
    function addSelectionIndicator(object) {
      const geometry = object.geometry;
      if (geometry) {
        const wireframe = new THREE.WireframeGeometry(geometry);
        const outlineMaterial = new THREE.LineBasicMaterial({ color: 0x00ffff, linewidth: 3 });
        selectedOutline = new THREE.LineSegments(wireframe, outlineMaterial);
        
        selectedOutline.position.copy(object.position);
        selectedOutline.rotation.copy(object.rotation);
        selectedOutline.scale.copy(object.scale);
        
        scene.add(selectedOutline);
      }
    }

    // ===== SERVER-MEDIATED OBJECT MANIPULATION =====
    window.moveObject = function(direction) {
      if (!selectedObject || !socket) return;
      
      const moveAmount = 0.5;
      const newPosition = {
        x: selectedObject.position.x,
        y: selectedObject.position.y,
        z: selectedObject.position.z
      };
      
      switch(direction) {
        case 'up': newPosition.y += moveAmount; break;
        case 'down': newPosition.y -= moveAmount; break;
        case 'left': newPosition.x -= moveAmount; break;
        case 'right': newPosition.x += moveAmount; break;
        case 'forward': newPosition.z -= moveAmount; break;
        case 'backward': newPosition.z += moveAmount; break;
      }
      
      // Update the object locally first
      selectedObject.position.set(newPosition.x, newPosition.y, newPosition.z);
      
      // Send to server for persistence and sync
      socket.emit('object-move', {
        objectId: selectedObject.userData.objectId || generateObjectId(selectedObject),
        position: newPosition,
        rotation: {
          x: selectedObject.rotation.x,
          y: selectedObject.rotation.y,
          z: selectedObject.rotation.z
        },
        scale: {
          x: selectedObject.scale.x,
          y: selectedObject.scale.y,
          z: selectedObject.scale.z
        }
      });
    };

    window.scaleObject = function(direction) {
      if (!selectedObject || !socket) return;
      
      const scaleAmount = direction === 'up' ? 1.1 : 0.9;
      const newScale = {
        x: selectedObject.scale.x * scaleAmount,
        y: selectedObject.scale.y * scaleAmount,
        z: selectedObject.scale.z * scaleAmount
      };
      
      // Update the object locally first
      selectedObject.scale.set(newScale.x, newScale.y, newScale.z);
      
      socket.emit('object-move', {
        objectId: selectedObject.userData.objectId || generateObjectId(selectedObject),
        position: {
          x: selectedObject.position.x,
          y: selectedObject.position.y,
          z: selectedObject.position.z
        },
        rotation: {
          x: selectedObject.rotation.x,
          y: selectedObject.rotation.y,
          z: selectedObject.rotation.z
        },
        scale: newScale
      });
    };

    window.rotateObject = function(axis) {
      if (!selectedObject || !socket) return;
      
      const newRotation = {
        x: selectedObject.rotation.x,
        y: selectedObject.rotation.y,
        z: selectedObject.rotation.z
      };
      
      if (axis === 'y') {
        newRotation.y += Math.PI / 4;
      }
      
      // Update the object locally first
      selectedObject.rotation.set(newRotation.x, newRotation.y, newRotation.z);
      
      socket.emit('object-move', {
        objectId: selectedObject.userData.objectId || generateObjectId(selectedObject),
        position: {
          x: selectedObject.position.x,
          y: selectedObject.position.y,
          z: selectedObject.position.z
        },
        rotation: newRotation,
        scale: {
          x: selectedObject.scale.x,
          y: selectedObject.scale.y,
          z: selectedObject.scale.z
        }
      });
    };

    window.resetObject = function() {
      if (!selectedObject || !selectedObject.userData || !socket) return;
      
      const userData = selectedObject.userData;
      
      // Update the object locally first
      selectedObject.position.copy(userData.originalPosition);
      selectedObject.rotation.copy(userData.originalRotation);
      selectedObject.scale.copy(userData.originalScale);
      
      socket.emit('object-move', {
        objectId: selectedObject.userData.objectId || generateObjectId(selectedObject),
        position: {
          x: userData.originalPosition.x,
          y: userData.originalPosition.y,
          z: userData.originalPosition.z
        },
        rotation: {
          x: userData.originalRotation.x,
          y: userData.originalRotation.y,
          z: userData.originalRotation.z
        },
        scale: {
          x: userData.originalScale.x,
          y: userData.originalScale.y,
          z: userData.originalScale.z
        }
      });
    };
    
    window.deleteSelected = function() {
      if (!selectedObject || !socket) return;
      
      // Send deletion to server
      socket.emit('object-delete', {
        objectId: selectedObject.userData.objectId || generateObjectId(selectedObject)
      });
      
      // Local cleanup will happen when server confirms deletion
    };
    
    window.deselectObject = deselectObject;
    
    // ===== HELPER FUNCTIONS =====
    // Move this function early since it's used by object manipulation functions
    function generateObjectId(object) {
      if (!object.userData.objectId) {
        object.userData.objectId = `obj_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      }
      return object.userData.objectId;
    }
    
    function updateObjectInScene(objectId, state) {
      // Find object by ID
      const object = sceneObjects.find(obj => obj.userData.objectId === objectId);
      if (object) {
        object.position.set(state.position.x, state.position.y, state.position.z);
        object.rotation.set(state.rotation.x, state.rotation.y, state.rotation.z);
        object.scale.set(state.scale.x, state.scale.y, state.scale.z);
        
        // Update outline if this object is selected
        if (selectedObject === object && selectedOutline) {
          selectedOutline.position.copy(object.position);
          selectedOutline.rotation.copy(object.rotation);
          selectedOutline.scale.copy(object.scale);
        }
      }
    }
    
    function removeObjectFromScene(objectId) {
      // Find and remove object by ID
      const objectIndex = sceneObjects.findIndex(obj => obj.userData.objectId === objectId);
      if (objectIndex > -1) {
        const object = sceneObjects[objectIndex];
        
        // If this object is selected, deselect it
        if (selectedObject === object) {
          deselectObject();
        }
        
        // Remove from scene and array
        scene.remove(object);
        sceneObjects.splice(objectIndex, 1);
        
        console.log(`🗑️ Removed object ${objectId} from scene`);
      }
    }
    
    // ===== USER AVATAR SYSTEM =====
    const userAvatars = new Map();
    const customAvatarModels = new Map(); // Store custom avatar GLB models
    let myCustomAvatarUrl = null; // Store custom avatar data URL
    
    function spawnUserAvatar(userId, avatar) {
      if (userAvatars.has(userId)) return; // Already exists
      
      // Create avatar container group
      const avatarGroup = new THREE.Group();
      
      // Check if user has custom avatar
      if (avatar.customAvatarUrl) {
        // Load custom GLB model
        const loader = new GLTFLoader();
        loader.load(avatar.customAvatarUrl, (gltf) => {
          const model = gltf.scene;
          model.scale.set(0.5, 0.5, 0.5); // Scale down to appropriate size
          
          // Center the model
          const box = new THREE.Box3().setFromObject(model);
          const center = box.getCenter(new THREE.Vector3());
          model.position.sub(center);
          model.position.y = 0; // Keep at ground level
          
          // Add to avatar group
          avatarGroup.add(model);
          customAvatarModels.set(userId, model);
          
          // Update lighting for the model
          model.traverse((child) => {
            if (child.isMesh) {
              child.castShadow = true;
              child.receiveShadow = true;
            }
          });
        }, 
        undefined,
        (error) => {
          console.error('Error loading custom avatar:', error);
          // Fall back to default sphere
          createDefaultAvatar(avatarGroup, avatar);
        });
      } else {
        // Create default sphere avatar
        createDefaultAvatar(avatarGroup, avatar);
      }
      
      avatarGroup.position.set(
        avatar.position.x, 
        avatar.position.y + 0.5, // Slightly above ground
        avatar.position.z
      );
      
      // Add name label
      const canvas = document.createElement('canvas');
      const context = canvas.getContext('2d');
      canvas.width = 256;
      canvas.height = 64;
      context.font = '24px Arial';
      context.fillStyle = 'white';
      context.textAlign = 'center';
      context.fillText(avatar.username, 128, 40);
      
      const labelTexture = new THREE.CanvasTexture(canvas);
      const labelMaterial = new THREE.SpriteMaterial({ map: labelTexture });
      const labelSprite = new THREE.Sprite(labelMaterial);
      labelSprite.position.set(0, 0.8, 0);
      labelSprite.scale.set(1, 0.25, 1);
      
      avatarGroup.add(labelSprite);
      scene.add(avatarGroup);
      
      userAvatars.set(userId, {
        mesh: avatarGroup,
        label: labelSprite,
        username: avatar.username,
        customAvatarUrl: avatar.customAvatarUrl
      });
      
      console.log(`🧑‍🤝‍🧑 Spawned avatar for ${avatar.username}`);
    }
    
    function createDefaultAvatar(avatarGroup, avatar) {
      const avatarGeometry = new THREE.SphereGeometry(0.2, 8, 6);
      const avatarMaterial = new THREE.MeshBasicMaterial({ 
        color: Math.random() * 0xffffff,
        transparent: true,
        opacity: 0.8
      });
      const avatarMesh = new THREE.Mesh(avatarGeometry, avatarMaterial);
      avatarGroup.add(avatarMesh);
    }
    
    function moveUserAvatar(userId, position, rotation) {
      const avatar = userAvatars.get(userId);
      if (avatar) {
        avatar.mesh.position.set(position.x, position.y + 0.5, position.z);
        if (rotation) {
          avatar.mesh.rotation.set(rotation.x, rotation.y, rotation.z);
        }
      }
    }
    
    function removeUserAvatar(userId) {
      const avatar = userAvatars.get(userId);
      if (avatar) {
        scene.remove(avatar.mesh);
        userAvatars.delete(userId);
        console.log(`🗑️ Removed avatar for user ${userId}`);
      }
    }
    
    function updateAvatarLabel(userId, newName) {
      const avatar = userAvatars.get(userId);
      if (avatar && avatar.label) {
        // Update the canvas texture with new name
        const canvas = document.createElement('canvas');
        const context = canvas.getContext('2d');
        canvas.width = 256;
        canvas.height = 64;
        context.font = '24px Arial';
        context.fillStyle = 'white';
        context.textAlign = 'center';
        context.fillText(newName, 128, 40);
        
        const labelTexture = new THREE.CanvasTexture(canvas);
        avatar.label.material.map = labelTexture;
        avatar.label.material.needsUpdate = true;
        
        console.log(`🏷️ Updated avatar label for ${userId}: ${newName}`);
      }
    }
    
    // ===== SCREEN SHARING HELPERS =====
    function handleRemoteScreenShare(data) {
      console.log('📺 Handling remote screen share:', data);
      
      // Show indicator that someone else is sharing
      if (data.applyToObject === 'SHARESCREEN-HERE' || data.userId !== myUserId) {
        // Find the large screen object
        const screenObject = sceneObjects.find(obj => obj.userData.objectId === 'SHARESCREEN-HERE');
        if (screenObject && largeScreen && largeScreen.canvas) {
          const ctx = largeScreen.canvas.getContext('2d');
          
          // Clear screen and show "Remote Sharing" message
          ctx.fillStyle = '#001122';
          ctx.fillRect(0, 0, largeScreen.canvas.width, largeScreen.canvas.height);
          
          // Add sharing indicator text
          ctx.fillStyle = '#00ff88';
          ctx.font = 'bold 64px Arial';
          ctx.textAlign = 'center';
          
          if (data.isVideoFile) {
            ctx.fillText('📹 VIDEO FILE SHARE', largeScreen.canvas.width/2, largeScreen.canvas.height/2 - 50);
          } else {
            ctx.fillText('🖥️ REMOTE SCREEN SHARE', largeScreen.canvas.width/2, largeScreen.canvas.height/2 - 50);
          }
          
          ctx.fillStyle = '#ffffff';
          ctx.font = '36px Arial';
          
          // Get username from userAvatars
          const sharingUser = userAvatars.get(data.userId);
          const username = sharingUser ? sharingUser.username : `User${data.userId.substr(0,4)}`;
          ctx.fillText(`Shared by: ${username}`, largeScreen.canvas.width/2, largeScreen.canvas.height/2 + 20);
          
          if (data.fileName) {
            ctx.font = '28px Arial';
            ctx.fillStyle = '#ffcc00';
            ctx.fillText(`File: ${data.fileName}`, largeScreen.canvas.width/2, largeScreen.canvas.height/2 + 60);
          }
          
          ctx.font = '24px Arial';
          ctx.fillStyle = '#888888';
          const audioText = data.hasAudio ? '🔊 Audio enabled' : '🔇 No audio';
          ctx.fillText(audioText, largeScreen.canvas.width/2, largeScreen.canvas.height/2 + 100);
          
          largeScreen.texture.needsUpdate = true;
          console.log('📺 Updated screen with remote sharing indicator');
        }
      }
    }
    
    function clearScreenShare(clearObject) {
      if (clearObject === 'SHARESCREEN-HERE') {
        if (largeScreen && largeScreen.canvas) {
          // Reset screen to default content
          const ctx = largeScreen.canvas.getContext('2d');
          ctx.fillStyle = '#000000';
          ctx.fillRect(0, 0, largeScreen.canvas.width, largeScreen.canvas.height);
          
          // Add default screen text
          ctx.fillStyle = '#333333';
          ctx.font = '48px Arial';
          ctx.textAlign = 'center';
          ctx.fillText('🖥️ LARGE DISPLAY', largeScreen.canvas.width/2, largeScreen.canvas.height/2 - 20);
          ctx.font = '24px Arial';
          ctx.fillText('Ready for screen sharing or video', largeScreen.canvas.width/2, largeScreen.canvas.height/2 + 20);
          
          largeScreen.texture.needsUpdate = true;
          console.log('📺 Cleared screen share and reset to default');
        }
      }
    }
    
    // ===== CHAT SYSTEM HELPERS =====
    function displayChatMessage(message) {
      console.log(`💬 ${message.username}: ${message.message}`);
      
      const chatMessages = document.getElementById('chat-messages');
      if (!chatMessages) return;
      
      const messageElement = document.createElement('div');
      messageElement.className = message.isSystem ? 'chat-message system-message' : 'chat-message';
      
      const timestamp = new Date(message.timestamp || new Date()).toLocaleTimeString('en-US', { 
        hour12: false, 
        hour: '2-digit', 
        minute: '2-digit' 
      });
      
      if (message.isSystem) {
        messageElement.innerHTML = `
          <span class="timestamp">[${timestamp}]</span>
          <span class="system-content">🔔 ${message.message}</span>
        `;
        messageElement.style.color = '#FFA500';
        messageElement.style.fontStyle = 'italic';
      } else {
        messageElement.innerHTML = `
          <span class="timestamp">[${timestamp}]</span>
          <span class="username">${message.username}:</span>
          <span class="content">${message.message}</span>
        `;
      }
      
      chatMessages.appendChild(messageElement);
      
      // Scroll to bottom
      chatMessages.scrollTop = chatMessages.scrollHeight;
      
      // Keep only last 50 messages for performance
      while (chatMessages.children.length > 50) {
        chatMessages.removeChild(chatMessages.firstChild);
      }
    }

    function sendChatMessage() {
      const chatInput = document.getElementById('chat-input');
      const message = chatInput.value.trim();
      
      if (!message || !socket || !socket.connected) return;
      
      socket.emit('chat-message', { message });
      chatInput.value = '';
    }

    function toggleChat() {
      const chatContainer = document.getElementById('chat-container');
      const chatToggle = document.getElementById('chat-toggle');
      
      if (chatContainer.classList.contains('hidden')) {
        chatContainer.classList.remove('hidden');
        chatToggle.textContent = '❌';
      } else {
        chatContainer.classList.add('hidden');
        chatToggle.textContent = '💬';
      }
    }
    
    function showObjectsList() {
      const container = document.getElementById('objects-list-container');
      container.innerHTML = '';
      
      if (sceneObjects.length === 0) {
        container.innerHTML = '<p style="color: rgba(255,255,255,0.7); text-align: center;">No objects in the space</p>';
      } else {
        sceneObjects.forEach((obj, index) => {
          if (obj.userData && obj.userData.name) {
            const item = document.createElement('div');
            item.className = 'object-list-item';
            
            // Check if this is the display screen (type: 'display') - it shouldn't have a delete button
            if (obj.userData.type === 'display') {
              item.innerHTML = `
                <span>${obj.userData.name}</span>
                <span style="color: rgba(255,255,255,0.5); font-size: 12px;">Built-in</span>
              `;
            } else {
              item.innerHTML = `
                <span>${obj.userData.name}</span>
                <button class="object-delete-btn" data-index="${index}">🗑️ Delete</button>
              `;
              
              // Add delete event listener only for deletable objects
              item.querySelector('.object-delete-btn').addEventListener('click', (e) => {
                e.stopPropagation();
                const objToDelete = sceneObjects[index];
                if (objToDelete && objToDelete.userData.objectId) {
                  // Send deletion to server
                  socket.emit('object-delete', {
                    objectId: objToDelete.userData.objectId
                  });
                  
                  // Remove from scene
                  scene.remove(objToDelete);
                  sceneObjects.splice(index, 1);
                  
                  // Refresh the list
                  showObjectsList();
                }
              });
            }
            
            container.appendChild(item);
          }
        });
      }
      
      document.getElementById('objects-list-dialog').classList.add('visible');
    }
    
    function getUserCount() {
      return userAvatars.size + 1; // +1 for current user
    }
    
    // ===== USER POSITION TRACKING =====
    let lastPositionUpdate = Date.now();
    let lastUserPosition = { x: 0, y: 0, z: 0 };
    let lastUserRotation = { x: 0, y: 0, z: 0 };
    
    function trackUserPosition() {
      if (!socket || !socket.connected) return;
      
      const now = Date.now();
      const timeDelta = now - lastPositionUpdate;
      
      // Only send updates every 100ms to avoid spam
      if (timeDelta < 100) return;
      
      const currentPosition = {
        x: Math.round(userObject.position.x * 100) / 100,
        y: Math.round(userObject.position.y * 100) / 100,
        z: Math.round(userObject.position.z * 100) / 100
      };
      
      const currentRotation = {
        x: Math.round(camera.rotation.x * 100) / 100,
        y: Math.round(camera.rotation.y * 100) / 100,
        z: Math.round(camera.rotation.z * 100) / 100
      };
      
      // Only send if position/rotation has changed significantly
      const positionChanged = 
        Math.abs(currentPosition.x - lastUserPosition.x) > 0.01 ||
        Math.abs(currentPosition.y - lastUserPosition.y) > 0.01 ||
        Math.abs(currentPosition.z - lastUserPosition.z) > 0.01;
        
      const rotationChanged = 
        Math.abs(currentRotation.x - lastUserRotation.x) > 0.01 ||
        Math.abs(currentRotation.y - lastUserRotation.y) > 0.01 ||
        Math.abs(currentRotation.z - lastUserRotation.z) > 0.01;
      
      if (positionChanged || rotationChanged) {
        socket.emit('user-move', {
          position: currentPosition,
          rotation: currentRotation
        });
        
        lastUserPosition = currentPosition;
        lastUserRotation = currentRotation;
        lastPositionUpdate = now;
      }
    }

    // Touch controls for mobile
    document.addEventListener('touchstart', (event) => {
      if (event.touches.length === 1) {
        const currentTime = new Date().getTime();
        const tapLength = currentTime - lastTap;
        
        if (tapLength < 500 && tapLength > 0) {
          isMoving = true;
          moveForward();
        }
        lastTap = currentTime;
        
        isDragging = true;
        previousMousePosition = {
          x: event.touches[0].clientX,
          y: event.touches[0].clientY
        };
      }
      event.preventDefault();
    });

    document.addEventListener('touchmove', (event) => {
      if (isDragging && event.touches.length === 1) {
        const deltaMove = {
          x: event.touches[0].clientX - previousMousePosition.x,
          y: event.touches[0].clientY - previousMousePosition.y
        };
        
        cameraRotation.y -= deltaMove.x * 0.005;
        cameraRotation.x -= deltaMove.y * 0.005;
        cameraRotation.x = Math.max(-Math.PI/2, Math.min(Math.PI/2, cameraRotation.x));
        
        previousMousePosition = {
          x: event.touches[0].clientX,
          y: event.touches[0].clientY
        };
      }
      event.preventDefault();
    });

    document.addEventListener('touchend', (event) => {
      isMoving = false;
      isDragging = false;
      event.preventDefault();
    });

    // Mouse controls for desktop
    document.addEventListener('mousedown', (event) => {
      if (event.target.closest('.model-controls') || event.target.closest('.controls-info') || event.target.closest('.screen-controls')) {
        return;
      }
      
      isDragging = true;
      previousMousePosition = { x: event.clientX, y: event.clientY };
      
      if (!isScreenVisible) {
        checkObjectSelection(event);
      }
    });

    document.addEventListener('mousemove', (event) => {
      if (isDragging) {
        const deltaMove = {
          x: event.clientX - previousMousePosition.x,
          y: event.clientY - previousMousePosition.y
        };
        
        cameraRotation.y -= deltaMove.x * 0.005;
        cameraRotation.x -= deltaMove.y * 0.005;
        cameraRotation.x = Math.max(-Math.PI/2, Math.min(Math.PI/2, cameraRotation.x));
        
        previousMousePosition = { x: event.clientX, y: event.clientY };
      }
    });

    document.addEventListener('mouseup', () => {
      isDragging = false;
    });

    // Keyboard controls
    const keys = {};
    document.addEventListener('keydown', (event) => {
      keys[event.code] = true;
      
      if (event.code === 'Enter' && isScreenVisible) {
        hideScreen();
        return;
      }
      
      if (!isScreenVisible && selectedObject) {
        switch(event.code) {
          case 'KeyR': resetObject(); break;
          case 'KeyQ': rotateObject('y'); break;
          case 'KeyE': scaleObject('up'); break;
          case 'KeyC': scaleObject('down'); break;
          case 'Delete':
          case 'Backspace': deleteSelected(); break;
          case 'Escape': deselectObject(); break;
        }
      }
    });

    document.addEventListener('keyup', (event) => {
      keys[event.code] = false;
    });

    function moveForward() {
      if (isMoving) {
        const direction = new THREE.Vector3(0, 0, -1);
        direction.applyQuaternion(camera.quaternion);
        userObject.position.add(direction.multiplyScalar(0.1));
        requestAnimationFrame(moveForward);
      }
    }

    // Drag and drop functionality
    let dragCounter = 0;

    document.addEventListener('dragenter', (e) => {
      e.preventDefault();
      dragCounter++;
      if (dragCounter === 1) {
        dragOverlay.classList.add('active');
      }
    });

    document.addEventListener('dragleave', (e) => {
      e.preventDefault();
      dragCounter--;
      if (dragCounter === 0) {
        dragOverlay.classList.remove('active');
      }
    });

    document.addEventListener('dragover', (e) => {
      e.preventDefault();
    });

    document.addEventListener('drop', (e) => {
      e.preventDefault();
      dragCounter = 0;
      dragOverlay.classList.remove('active');
      
      const files = e.dataTransfer.files;
      if (files.length > 0) {
        const file = files[0];
        if (file.name.toLowerCase().endsWith('.glb') || file.name.toLowerCase().endsWith('.gltf')) {
          hideScreen();
          loadModelFromFile(file);
        } else {
          alert('Please drop a GLB or GLTF file');
        }
      }
    });

    // GLTF Loader
    const loader = new GLTFLoader();
    
    // Load the room model after loader is initialized
    loadRoomModel();

    function loadModelFromFile(file) {
      const url = URL.createObjectURL(file);
      
      loader.load(url, function(gltf) {
        const model = gltf.scene;
        
        model.position.set(0, 0.5, -3);
        model.scale.set(1, 1, 1);
        
        model.traverse((child) => {
          if (child.isMesh) {
            child.castShadow = true;
            child.receiveShadow = true;
          }
        });
        
        // Generate unique ID for this object
        const objectId = `obj_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        
        model.userData = {
          name: file.name.replace('.glb', '').replace('.gltf', ''),
          type: 'model',
          originalPosition: new THREE.Vector3(0, 0.5, -3),
          originalScale: new THREE.Vector3(1, 1, 1),
          originalRotation: new THREE.Euler(0, 0, 0),
          objectId: objectId  // Use the generated ID
        };
        
        scene.add(model);
        sceneObjects.push(model);
        selectObject(model);
        
        // Notify server of new object
        if (socket && socket.connected) {
          socket.emit('object-add', {
            objectId: model.userData.objectId,
            name: model.userData.name,
            type: model.userData.type,
            position: model.position,
            rotation: model.rotation,
            scale: model.scale
          });
        }
        
        URL.revokeObjectURL(url);
        console.log('Model loaded successfully:', file.name);
      }, 
      function(progress) {
        console.log('Loading progress:', (progress.loaded / progress.total * 100) + '%');
      },
      function(error) {
        console.error('Error loading model:', error);
        alert('Error loading model: ' + error.message);
      });
    }

    // Handle window resize
    // Research-backed resize handling for mobile compatibility
    function onWindowResize() {
      // Mobile-safe sizing
      const width = isMobile ? Math.min(window.innerWidth, 1024) : window.innerWidth;
      const height = isMobile ? Math.min(window.innerHeight, 1024) : window.innerHeight;
      
      camera.aspect = width / height;
      camera.updateProjectionMatrix();
      renderer.setSize(width, height);
      
      if (composer) {
        composer.setSize(width, height);
      }
      
      console.log('Resized to:', width, 'x', height, 'Mobile:', isMobile);
    }
    
    window.addEventListener('resize', onWindowResize);

    // Animation loop with context loss tracking
    function animate() {
      window.animationId = requestAnimationFrame(animate);
      
      camera.rotation.order = 'YXZ';
      camera.rotation.y = cameraRotation.y;
      camera.rotation.x = cameraRotation.x;
      
      const moveSpeed = 0.1;
      if (keys['KeyW'] || keys['ArrowUp']) {
        const direction = new THREE.Vector3(0, 0, -1);
        direction.applyQuaternion(camera.quaternion);
        userObject.position.add(direction.multiplyScalar(moveSpeed));
      }
      if (keys['KeyS'] || keys['ArrowDown']) {
        const direction = new THREE.Vector3(0, 0, 1);
        direction.applyQuaternion(camera.quaternion);
        userObject.position.add(direction.multiplyScalar(moveSpeed));
      }
      if (keys['KeyA'] || keys['ArrowLeft']) {
        const direction = new THREE.Vector3(-1, 0, 0);
        direction.applyQuaternion(camera.quaternion);
        userObject.position.add(direction.multiplyScalar(moveSpeed));
      }
      if (keys['KeyD'] || keys['ArrowRight']) {
        const direction = new THREE.Vector3(1, 0, 0);
        direction.applyQuaternion(camera.quaternion);
        userObject.position.add(direction.multiplyScalar(moveSpeed));
      }
      
      
      // Mobile-optimized rendering with explicit clearing
      // ===== USER POSITION TRACKING =====
      trackUserPosition();
      
      if (isMobile) {
        // Explicit clear for mobile compatibility
        renderer.clear(true, true, true);
        // Force immediate render without composer
        renderer.render(scene, camera);
      } else if (composer) {
        composer.render();
      } else {
        renderer.render(scene, camera);
      }
    }

    // Add event listeners for control buttons
    ['move-up', 'move-down', 'move-left', 'move-right', 'move-forward', 'move-backward'].forEach(id => {
      document.getElementById(id).addEventListener('click', (e) => {
        e.stopPropagation();
        moveObject(id.split('-')[1]);
      });
    });
    
    ['scale-up', 'scale-down'].forEach(id => {
      document.getElementById(id).addEventListener('click', (e) => {
        e.stopPropagation();
        scaleObject(id.split('-')[1]);
      });
    });
    
    document.getElementById('rotate-y').addEventListener('click', (e) => {
      e.stopPropagation();
      rotateObject('y');
    });
    
    document.getElementById('reset-object').addEventListener('click', (e) => {
      e.stopPropagation();
      resetObject();
    });
    
    document.getElementById('delete-selected').addEventListener('click', (e) => {
      e.stopPropagation();
      deleteSelected();
    });
    
    document.getElementById('deselect-object').addEventListener('click', (e) => {
      e.stopPropagation();
      deselectObject();
    });

    // Glass menu event handlers
    document.getElementById('menu-home').addEventListener('click', (e) => {
      e.stopPropagation();
      console.log('Home button clicked - future navigation');
      // Future: Navigate to global directory
    });
    
    document.getElementById('menu-screen').addEventListener('click', (e) => {
      e.stopPropagation();
      const screenControls = document.getElementById('screen-controls');
      if (screenControls.style.display === 'none') {
        screenControls.style.display = 'block';
      } else {
        screenControls.style.display = 'none';
      }
    });
    
    document.getElementById('menu-objects').addEventListener('click', (e) => {
      e.stopPropagation();
      const objectsControls = document.getElementById('objects-controls');
      if (objectsControls.style.display === 'none') {
        // Hide other dropdowns
        document.getElementById('screen-controls').style.display = 'none';
        objectsControls.style.display = 'block';
      } else {
        objectsControls.style.display = 'none';
      }
    });
    
    document.getElementById('menu-help').addEventListener('click', (e) => {
      e.stopPropagation();
      document.getElementById('help-dialog').classList.add('visible');
    });
    
    document.getElementById('help-close').addEventListener('click', (e) => {
      e.stopPropagation();
      document.getElementById('help-dialog').classList.remove('visible');
    });
    
    // GLB Upload from dropdown
    document.getElementById('glb-upload').addEventListener('change', (e) => {
      const file = e.target.files[0];
      if (file) {
        loadModelFromFile(file);
        document.getElementById('objects-controls').style.display = 'none';
      }
    });
    
    // View Objects button
    document.getElementById('view-objects').addEventListener('click', (e) => {
      e.stopPropagation();
      showObjectsList();
      document.getElementById('objects-controls').style.display = 'none';
    });
    
    // Close objects list
    document.getElementById('objects-list-close').addEventListener('click', (e) => {
      e.stopPropagation();
      document.getElementById('objects-list-dialog').classList.remove('visible');
    });
    
    // Custom avatar upload
    document.getElementById('upload-avatar').addEventListener('click', (e) => {
      e.stopPropagation();
      const input = document.createElement('input');
      input.type = 'file';
      input.accept = '.glb,.gltf';
      input.onchange = async (event) => {
        const file = event.target.files[0];
        if (file) {
          try {
            // Check file size (limit to 2MB for data URLs)
            if (file.size > 2 * 1024 * 1024) {
              alert('Avatar file too large. Please use a file smaller than 2MB.');
              return;
            }
            
            // Convert file to data URL for sharing
            const reader = new FileReader();
            reader.onload = (e) => {
              myCustomAvatarUrl = e.target.result;
              
              // Notify server of custom avatar update
              if (socket && socket.connected) {
                socket.emit('user-avatar-update', {
                  customAvatarUrl: myCustomAvatarUrl
                });
                console.log('🎭 Custom avatar uploaded (size: ' + (file.size / 1024).toFixed(2) + 'KB)');
              }
              
              // Update local user data
              if (userAvatars.has(myUserId)) {
                userAvatars.get(myUserId).customAvatarUrl = myCustomAvatarUrl;
              }
            };
            reader.readAsDataURL(file);
          } catch (error) {
            console.error('Error uploading avatar:', error);
            alert('Failed to upload avatar');
          }
        }
      };
      input.click();
    });
    
    // Screen control event listeners
    document.getElementById('share-screen').addEventListener('click', (e) => {
      e.stopPropagation();
      startScreenShare();
    });
    
    document.getElementById('stop-sharing').addEventListener('click', (e) => {
      e.stopPropagation();
      stopScreenShare();
    });
    
    document.getElementById('video-upload').addEventListener('change', (e) => {
      const file = e.target.files[0];
      if (file) {
        loadVideoFile(file);
      }
    });
    
    // Load video button removed - using label wrapper instead
    
    document.getElementById('clear-screen').addEventListener('click', (e) => {
      e.stopPropagation();
      clearScreen();
    });

    // Audio control event listeners
    let isAudioMuted = false;
    document.getElementById('toggle-audio').addEventListener('click', (e) => {
      e.stopPropagation();
      const videoEl = document.getElementById('video-element');
      const button = document.getElementById('toggle-audio');
      
      isAudioMuted = !isAudioMuted;
      videoEl.muted = isAudioMuted;
      
      // Also update all peer video elements
      document.querySelectorAll('video').forEach(video => {
        video.muted = isAudioMuted;
      });
      
      button.textContent = isAudioMuted ? '🔇 Audio OFF' : '🔊 Audio ON';
      console.log('Audio ' + (isAudioMuted ? 'muted' : 'unmuted'));
    });
    
    document.getElementById('volume-slider').addEventListener('input', (e) => {
      const volume = e.target.value / 100;
      const videoEl = document.getElementById('video-element');
      videoEl.volume = volume;
      
      // Also update all peer video elements
      document.querySelectorAll('video').forEach(video => {
        video.volume = volume;
      });
      
      console.log('Volume set to:', Math.round(volume * 100) + '%');
    });

    // Chat interface event listeners
    document.getElementById('chat-send').addEventListener('click', (e) => {
      e.stopPropagation();
      sendChatMessage();
    });

    document.getElementById('chat-input').addEventListener('keydown', (e) => {
      if (e.key === 'Enter') {
        e.preventDefault();
        sendChatMessage();
      }
      e.stopPropagation(); // Prevent triggering 3D scene controls
    });

    document.getElementById('chat-toggle').addEventListener('click', (e) => {
      e.stopPropagation();
      toggleChat();
    });

    // User list toggle functionality
    document.getElementById('user-list-close').addEventListener('click', (e) => {
      e.stopPropagation();
      const userList = document.getElementById('user-list');
      userList.classList.toggle('collapsed');
      
      // Change button text based on state
      const closeButton = document.getElementById('user-list-close');
      if (userList.classList.contains('collapsed')) {
        closeButton.textContent = '+';
      } else {
        closeButton.textContent = '×';
      }
    });


    // Note: Cloudflare Worker system removed - using Railway P2P WebRTC only
    
    // Note: initializeWorkerConnection removed - using Railway P2P only
    
    // Note: handleWorkerMessage removed - using Railway P2P only
    
    // Note: displayWorkerFrame removed - using Railway P2P only
    
    // Note: startWorkerBroadcast removed - using Railway P2P only
    
    // Note: stopWorkerBroadcast removed - using Railway P2P only
    
    // Note: loadCurrentWorkerFrame removed - using P2P WebRTC instead of worker frame streaming

    // Show welcome dialog first, then initialize room system
    showWelcomeDialog();
    
    // Initialize Cloudflare visitor counter immediately (Disabled)
    // initializeCloudflareVisitorCounter();
    
    // Note: Auto-loading current frame removed - using P2P WebRTC instead

    // Start the animation loop
    // Final mobile compatibility check before starting animation
    console.log('=== FINAL RENDER CHECK ===');
    console.log('Renderer ready:', !!renderer);
    console.log('Scene objects:', scene.children.length);
    console.log('Camera position:', camera.position);
    console.log('WebGL context valid:', !renderer.getContext().isContextLost());
    
    // Start animation with error handling
    try {
      animate();
      console.log('Animation loop started successfully');
    } catch (error) {
      console.error('Failed to start animation:', error);
      // Fallback: try to render one frame
      try {
        renderer.render(scene, camera);
        console.log('Single frame render successful');
      } catch (renderError) {
        console.error('Render failed completely:', renderError);
        document.body.innerHTML += '<div style="color: red; position: fixed; top: 10px; left: 10px;">Render Error: ' + renderError.message + '</div>';
      }
    }

    console.log('3D Interactive Website loaded successfully!');
  </script>
</body>
</html>